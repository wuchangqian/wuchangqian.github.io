<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[每个人的声音都面向世界]]></title>
  <link href="http://me.94313.net/atom.xml" rel="self"/>
  <link href="http://me.94313.net/"/>
  <updated>2020-02-27T18:02:59+08:00</updated>
  <id>http://me.94313.net/</id>
  <author>
    <name><![CDATA[wuchangqian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个能打印它自身源代码的c程序]]></title>
    <link href="http://me.94313.net/blog/2017/09/13/c-print-itselfs-source/"/>
    <updated>2017-09-13T16:55:21+08:00</updated>
    <id>http://me.94313.net/blog/2017/09/13/c-print-itselfs-source</id>
    <content type="html"><![CDATA[<p>这段代码很有意思！能编译出来。程序的功能就是：打印它自己的c代码！！</p>

<pre><code>#include &lt;stdio.h&gt;
char* recurse="#include &lt;stdio.h&gt;%cchar* recurse=%c%s%c;%cint main(){printf(recurse,10,34,recurse,34,10,10);}%c";
int main(){printf(recurse,10,34,recurse,34,10,10);}
</code></pre>

<p>这里也是（2009年在百度知道里面看到的）</p>

<pre><code>main(a){printf(a,34,a="main(a){printf(a,34,a=%c%s%c,34);34;}",34);}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell History 命令扩展]]></title>
    <link href="http://me.94313.net/blog/2017/08/10/shell-history/"/>
    <updated>2017-08-10T11:35:36+08:00</updated>
    <id>http://me.94313.net/blog/2017/08/10/shell-history</id>
    <content type="html"><![CDATA[<p><img src="http://me.94313.net/images/shell_history.png" title="shell history 命令扩展" alt="shell history 命令扩展" /></p>

<ol>
<li>!^ 获取上一条命令的第一个参数。</li>
<li>!$ 获取上一条命令的最后一个参数。</li>
<li>!:n 获取上一条命令的第n个参数，n从1开始。（为0时则挑选出命令名称）</li>
<li>!:n-x 获取上一条命令的第n个参数到第x个参数，n和x均从1开始。（为0时则挑选出命令名称）</li>
<li>!* 获取上一条命令的所有参数。</li>
<li>!n* n为数字，获取上一条命令的从第n个参数（含第n个参数）后的所有参数。</li>
<li>!n- n为数字，获取上一条命令的从第n个参数（含第n个参数）后的除了最后一个参数外的所有参数。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 下ffmpeg使用]]></title>
    <link href="http://me.94313.net/blog/2017/05/07/windows-xia-ffmpegshi-yong/"/>
    <updated>2017-05-07T18:14:09+08:00</updated>
    <id>http://me.94313.net/blog/2017/05/07/windows-xia-ffmpegshi-yong</id>
    <content type="html"><![CDATA[<p>列出设备</p>

<pre><code>1. ffmpeg -list_devices true -f dshow -i dummy  
</code></pre>

<p>保存文件</p>

<pre><code>1. ffmpeg -f dshow -i video="Integrated Camera" -vcodec libx264 mycamera.mkv  
</code></pre>

<p>直接播放</p>

<pre><code>1. ffplay -f dshow -i video="Integrated Camera"  
</code></pre>

<p>推流</p>

<pre><code>1. ffmpeg -f dshow -i video="Integrated Camera" -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -f flv rtmp://192.168.1.5/mytv/test1
</code></pre>

<p>录制屏幕</p>

<pre><code>1. ffmpeg -f -dshow -s 1600x900 -r 50 -vcodec libx264 –preset:v ultrafast –tune:v zerolatency -crf 18 -f mpegts rtmp://192.168.1.5/mytv/test2      在Windows平台下，使用-dshow取代x11grab
</code></pre>

<p>-i 指定输入的文件
-acodec 指定输出文件的音频编码
-vcodec 指定输出文件的视频编码</p>

<p>最简单的抓屏：</p>

<pre><code>ffmpeg -f gdigrab -i desktop out.mpg
</code></pre>

<p>从屏幕的（10,20）点处开始，抓取640x480的屏幕，设定帧率为5</p>

<pre><code>ffmpeg -f gdigrab -framerate 5 -offset_x 10 -offset_y 20 -video_size 640x480 -i desktop out.mpg
</code></pre>

<p>//=======================================================================
    ffmpeg -ss START -t DURATION -i INPUT -vcodec copy -acodec copy OUTPUT
    对上面的命令稍做个解释。
    -ss 开始时间，如： 00:00:20，表示从20秒开始；
    -t 时长，如： 00:00:10，表示截取10秒长的视频；
    -i 输入，后面是空格，紧跟着就是输入视频文件；
    -vcodec copy 和 -acodec copy表示所要使用的视频和音频的编码格式，这里指定为copy表示原样拷贝；
    INPUT，输入视频文件；
    OUTPUT，输出视频文件；
//=======================================================================</p>

<pre><code>ffmpeg -f x11grab -s xga -r 10 -i :0.0+0+0 wheer.avi
-i video="screen-capture-recorder"

ffmpeg -f dshow -i video="DirectShow video devices" -f dshow -i audio="DirectShow audio devices" -pix_fmt yuv420p -vcodec libx264 -acodec libvo_aacenc -s 1280x720 -r 25 -q 10 -ar 44100 -ac 2 -tune zerolatency -preset ultrafast -f mpegts - | ffmpeg -f mpegts -i - -c copy -bsf:a aac_adtstoasc -f flv temp.flv
</code></pre>

<p>-r选项设置每秒提取图片的帧数。
-q:v 2  设置输出文件的视频质量为：优</p>

<p>截取一张352x240尺寸大小的，格式为jpg的图片</p>

<pre><code>ffmpeg -i 1.mp4 -y -f image2 -t 120.001 -s 352x240 a.jpg
</code></pre>

<p>把视频的前30帧转换成一个Animated Gif ：</p>

<pre><code>ffmpeg -i 1.mp4 -vframes 30 -y -f gif a.gif
</code></pre>

<p>生成缩略图</p>

<pre><code>ffmpeg -i 1.mp4 -y -f image2 -ss 08.010 -t 0.001 -s 352x240 b.jpg
</code></pre>

<p>列出本机设备</p>

<pre><code>ffmpeg -list_devices true -f dshow -i dummy
</code></pre>

<p>从视频中生成gif图片</p>

<pre><code>ffmpeg -i 1.mp4 -ss 10 -t 10   -s 480x360  tutu.gif
</code></pre>

<h2>-ss 指从 10s 开始转码,-t 指转换 10s 的视频 -s 指定尺寸</h2>

<pre><code>rtmp://video-center.alivecdn.com/AppName/StreamName?vhost=zhibo.busionline.com
</code></pre>

<p>前言：FFmpeg是做音视频开发的一个优秀的开源库，可以在不同平台下编译，能够实现视频采集、视频格式转化、视频截图、视频添加水印、视频切片、视频录制、视频推流、更改音视频参数功能等。通过终端命令及开发时如何实现这些功能，本文做一整理记录，以备不时之需。下面共四组命令。</p>

<p>第一组</p>

<p>1.分离视频音频流</p>

<pre><code>ffmpeg -i input_file -vcodec copy -an output_file_video　　//分离视频流ffmpeg -i input_file -acodec copy -vn output_file_audio　　//分离音频流
</code></pre>

<p>2.视频解复用</p>

<pre><code>ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264

ffmpeg –i test.avi –vcodec copy –an –f m4v test.264
</code></pre>

<p>3.视频转码</p>

<pre><code>ffmpeg –i test.mp4 –vcodec h264 –s 352*278 –an –f m4v test.264
</code></pre>

<p>//转码为码流原始文件</p>

<pre><code>ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v test.264 //转码为码流原始文件

ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi //转码为封装文件
</code></pre>

<p>说明：-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制</p>

<p>4.视频封装</p>

<pre><code>ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file
</code></pre>

<p>5.视频剪切</p>

<pre><code>ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg //提取图片

ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi //剪切视频//-r 提取图像的频率，-ss 开始时间，-t 持续时间
</code></pre>

<p>6.视频录制</p>

<pre><code>ffmpeg –i rtsp://192.168.3.205:5555/test –vcodec copy out.avi
</code></pre>

<p>7、利用ffmpeg视频切片</p>

<p>主要把视频源切成若干个.ts格式的视频片段然后生成一个.m3u8的切片文件索引提供给html5的video做hls直播源</p>

<p>命令如下：</p>

<pre><code>ffmpeg -i 视频源地址 -strict -2 -c:v libx264 -c:a aac -f hls m3u8文件输出地址
</code></pre>

<p>8、ffmpeg缩放视频</p>

<p>假设原始视频尺寸是 1080p（即 1920×1080 px，16:9），使用下面命令可以缩小到 480p：(ps:以下这个命令，据说违反微信平台相关法律，蛋疼，用不了文字，只能用图片了)</p>

<p>各个参数的含义：-i a.mov 指定待处理视频的文件名-vf scale=853:480 vf 参数用于指定视频滤镜，其中 scale 表示缩放，后面的数字表示缩放至 853×480 px，其中的 853px 是计算而得，因为原始视频的宽高比为 16:9，所以为了让目标视频的高度为 480px，则宽度 = 480 x 9 / 16 = 853-acodec aac 指定音频使用 aac 编码。注：因为 ffmpeg 的内置 aac 编码目前还是试验阶段，故会提示添加参数 “-strict -2” 才能继续，尽管添加即可。又或者使用外部的 libfaac（需要重新编译 ffmpeg）。-vcodec h264 指定视频使用 h264 编码。注：目前手机一般视频拍摄的格式（封装格式、文件格式）为 mov 或者 mp4，这两者的音频编码都是 aac，视频都是 h264。out.mp4 指定输出文件名上面的参数 scale=853:480 当中的宽度和高度实际应用场景中通常只需指定一个，比如指定高度为 480 或者 720，至于宽度则可以传入 “-1” 表示由原始视频的宽高比自动计算而得。即参数可以写为：scale=-1:480，当然也可以 scale=480:-1</p>

<p>9、ffmpeg裁剪</p>

<p>有时可能只需要视频的正中一块，而两头的内容不需要，这时可以对视频进行裁剪（crop），比如有一个竖向的视频 1080 x 1920，如果指向保留中间 1080×1080 部分命令如下：ffmpeg -i 视频源地址 -strict -2 -vf crop=1080:1080:0:420 视频输出地址（如：out.mp4）</p>

<p>其中的 crop=1080:1080:0:420 才裁剪参数，具体含义是 crop=width:height:x:y，其中 width 和 height 表示裁剪后的尺寸，x:y 表示裁剪区域的左上角坐标。比如当前这个示例，我们只需要保留竖向视频的中间部分，所以 x 不用偏移，故传入0，而 y 则需要向下偏移：(1920 – 1080) / 2 = 420</p>

<ol>
<li><p>转视频格式</p>

<p>ffmpeng -i source.mp4 -c:v libx264 -crf 24 destination.flv</p></li>
</ol>


<p>其中 -crf 很重要，是控制转码后视频的质量，质量越高，文件也就越大。</p>

<p>此值的范围是 0 到 51：0 表示高清无损；23 是默认值（如果没有指定此参数）；51 虽然文件最小，但效果是最差的。</p>

<p>值越小，质量越高，但文件也越大，建议的值范围是 18 到 28。而值 18 是视觉上看起来无损或接近无损的，当然不代表是数据（技术上）的转码无损。</p>

<p>第二组</p>

<p>1.ffmpeg 把文件当做直播推送至服务器 (RTMP + FLV)</p>

<pre><code>ffmpeg - re -i demo.mp4 -c copy - f flv rtmp://w.gslb.letv/live/streamid
</code></pre>

<p>2.将直播的媒体保存到本地</p>

<pre><code>ffmpeg -i rtmp://r.glsb.letv/live/streamid -c copy streamfile.flv
</code></pre>

<p>3.将一个直播流，视频改用h264压缩，音频改用faac压缩，送至另一个直播服务器</p>

<pre><code>ffmpeg -i rtmp://r.glsb.letv/live/streamidA -c:a libfaac -ar 44100 -ab 48k -c:v libx264 -vpre slow -vpre baseline -f flv rtmp://w.glsb.letv/live/streamb
</code></pre>

<p>4.提取视频中的音频,并保存为mp3 然后输出</p>

<pre><code>ffmpeg -i input.avi -b:a 128k output.mp3
</code></pre>

<ol>
<li><p>将mp3转为pcm</p>

<p> ffmpeg-iinput.mp3-fs16be-acodecpcm_s16beoutput.pcm</p></li>
</ol>


<p>第三组</p>

<p>1.获取视频的信息</p>

<pre><code>ffmpeg -i video.avi
</code></pre>

<p>2.将图片序列合成视频</p>

<pre><code>ffmpeg -f image2 -i image%d.jpg video.mpg
</code></pre>

<p>上面的命令会把当前目录下的图片（名字如：image1.jpg. image2.jpg. 等&hellip;）合并成video.mpg</p>

<p>3.将视频分解成图片序列</p>

<pre><code>ffmpeg -i video.mpg image%d.jpg
</code></pre>

<p>上面的命令会生成image1.jpg. image2.jpg. &hellip;</p>

<pre><code>支持的图片格式有：PGM. PPM. PAM. PGMYUV. JPEG. GIF. PNG. TIFF. SGI
</code></pre>

<p>4.为视频重新编码以适合在iPod/iPhone上播放</p>

<pre><code>ffmpeg -i source_video.avi input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X final_video.mp4
</code></pre>

<p>5.为视频重新编码以适合在PSP上播放</p>

<pre><code>ffmpeg -i source_video.avi -b 300 -s 320x240 -vcodec xvid -ab 32 -ar 24000 -acodec aac final_video.mp4
</code></pre>

<p>6.从视频抽出声音.并存为Mp3</p>

<pre><code>ffmpeg -i source_video.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 sound.mp3
</code></pre>

<p>7.将wav文件转成Mp3</p>

<pre><code>ffmpeg -i son_origine.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 son_final.mp3
</code></pre>

<p>8.将.avi视频转成.mpg</p>

<pre><code>ffmpeg -i video_origine.avi video_finale.mpg
</code></pre>

<p>9.将.mpg转成.avi</p>

<pre><code>ffmpeg -i video_origine.mpg video_finale.avi
</code></pre>

<p>10.将.avi转成gif动画（未压缩）</p>

<pre><code>ffmpeg -i video_origine.avi gif_anime.gif
</code></pre>

<p>11.合成视频和音频</p>

<pre><code>ffmpeg -i son.wav -i video_origine.avi video_finale.mpg
</code></pre>

<p>12.将.avi转成.flv</p>

<pre><code>ffmpeg -i video_origine.avi -ab 56 -ar 44100 -b 200 -r 15 -s 320x240 -f flv video_finale.flv
</code></pre>

<p>13.将.avi转成dv</p>

<pre><code>ffmpeg -i video_origine.avi -s pal -r pal -aspect 4:3 -ar 48000 -ac 2 video_finale.dv
</code></pre>

<p>或者：</p>

<pre><code>ffmpeg -i video_origine.avi -target pal-dv video_finale.dv
</code></pre>

<p>14.将.avi压缩成divx</p>

<pre><code>ffmpeg -i video_origine.avi -s 320x240 -vcodec msmpeg4v2 video_finale.avi
</code></pre>

<p>15.将Ogg Theora压缩成Mpeg dvd</p>

<pre><code>ffmpeg -i film_sortie_cinelerra.ogm -s 720x576 -vcodec mpeg2video -acodec mp3 film_terminate.mpg
</code></pre>

<p>16.将.avi压缩成SVCD mpeg2</p>

<p>NTSC格式：</p>

<pre><code>ffmpeg -i video_origine.avi -target ntsc-svcd video_finale.mpg
</code></pre>

<p>PAL格式：</p>

<pre><code>ffmpeg -i video_origine.avi -target pal-dvcd video_finale.mpg
</code></pre>

<p>17.将.avi压缩成VCD mpeg2</p>

<pre><code>NTSC格式： 
ffmpeg -i video_origine.avi -target ntsc-vcd video_finale.mpg
</code></pre>

<p>PAL格式：</p>

<pre><code>ffmpeg -i video_origine.avi -target pal-vcd video_finale.mpg
</code></pre>

<p>18.多通道编码</p>

<pre><code>ffmpeg -i fichierentree -pass 2 -passlogfile ffmpeg2pass fichiersortie-2
</code></pre>

<p>19.从flv提取mp3</p>

<pre><code>ffmpeg -i source.flv -ab 128k dest.mp3
</code></pre>

<p>第四组</p>

<p>1、将文件当做直播送至live</p>

<pre><code>ffmpeg -re -i localFile.mp4 -c copy -f flv rtmp://server/live/streamName
</code></pre>

<p>2、将直播媒体保存至本地文件</p>

<pre><code>ffmpeg -i rtmp://server/live/streamName -c copy dump.flv
</code></pre>

<p>3、将其中一个直播流，视频改用h264压缩，音频不变，送至另外一个直播服务流</p>

<pre><code>ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v libx264 -vpre slow -f flv rtmp://server/live/h264Stream
</code></pre>

<p>4、将其中一个直播流，视频改用h264压缩，音频改用faac压缩，送至另外一个直播服务流</p>

<pre><code>ffmpeg -i rtmp://server/live/originalStream -c:a libfaac -ar 44100 -ab 48k -c:v libx264 -vpre slow -vpre baseline -f flv rtmp://server/live/h264Stream
</code></pre>

<p>5、将其中一个直播流，视频不变，音频改用faac压缩，送至另外一个直播服务流</p>

<pre><code>ffmpeg -i rtmp://server/live/originalStream -acodec libfaac -ar 44100 -ab 48k -vcodec copy -f flv rtmp://server/live/h264_AAC_Stream
</code></pre>

<p>6、将一个高清流，复制为几个不同视频清晰度的流重新发布，其中音频不变</p>

<pre><code>ffmpeg -re -i rtmp://server/live/high_FMLE_stream -acodec copy -vcodec x264lib -s 640×360 -b 500k -vpre medium -vpre baseline rtmp://server/live/baseline_500k -acodec copy -vcodec x264lib -s 480×272 -b 300k -vpre medium -vpre baseline rtmp://server/live/baseline_300k -acodec copy -vcodec x264lib -s 320×200 -b 150k -vpre medium -vpre baseline rtmp://server/live/baseline_150k -acodec libfaac -vn -ab 48k rtmp://server/live/audio_only_AAC_48k
</code></pre>

<p>7、功能一样，只是采用-x264opts选项</p>

<pre><code>ffmpeg -re -i rtmp://server/live/high_FMLE_stream -c:a copy -c:v x264lib -s 640×360 -x264opts bitrate=500:profile=baseline:preset=slow rtmp://server/live/baseline_500k -c:a copy -c:v x264lib -s 480×272 -x264opts bitrate=300:profile=baseline:preset=slow rtmp://server/live/baseline_300k -c:a copy -c:v x264lib -s 320×200 -x264opts bitrate=150:profile=baseline:preset=slow rtmp://server/live/baseline_150k -c:a libfaac -vn -b:a 48k rtmp://server/live/audio_only_AAC_48k
</code></pre>

<p>8、将当前摄像头及音频通过DSSHOW采集，视频h264、音频faac压缩后发布</p>

<pre><code>ffmpeg -r 25 -f dshow -s 640×480 -i video=”video source name”:audio=”audio source name” -vcodec libx264 -b 600k -vpre slow -acodec libfaac -ab 128k -f flv rtmp://server/application/stream_name
</code></pre>

<p>9、将一个JPG图片经过h264压缩循环输出为mp4视频</p>

<pre><code>ffmpeg.exe -i INPUT.jpg -an -vcodec libx264 -coder 1 -flags +loop -cmp +chroma -subq 10 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -flags2 +dct8x8 -trellis 2 -partitions +parti8x8+parti4x4 -crf 24 -threads 0 -r 25 -g 25 -y OUTPUT.mp4
</code></pre>

<p>10、将普通流视频改用h264压缩，音频不变，送至高清流服务(新版本FMS live=1)</p>

<pre><code>ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v libx264 -vpre slow -f flv “rtmp://server/live/h264Stream live=1〃
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htop是个好东西]]></title>
    <link href="http://me.94313.net/blog/2015/01/06/htop(%E5%86%B2%E7%AA%81_wcq-PC_2015-07-06%2022-06-31)/"/>
    <updated>2015-01-06T13:49:16+08:00</updated>
    <id>http://me.94313.net/blog/2015/01/06/htop(冲突_wcq-PC_2015-07-06 22-06-31)</id>
    <content type="html"><![CDATA[<pre><code>Htop是一款运行于Linux系统监控与进程管理软件，用于取代Unix下传统的top。与top只提供最消耗资源的进程列表不同，htop提供所有进程的列表，并且使用彩色标识出处理器、swap和内存状态。
</code></pre>

<p>用户一般可以在top无法提供详尽系统信息的情况下选择安装并使用htop。比如，在查找应用程序的内存泄漏问题时。与top相比，htop提供更方便、光标控制的界面来杀死进程。
htop用C语言编写，采用了ncurses库。htop的名称源于其作者的名字。</p>

<h2>安装htop</h2>

<pre><code>yum -y install ncurses-devel #htop依赖ncurses
cd /opt
wget -c http://ncu.dl.sourceforge.net/project/htop/htop/1.0.2/htop-1.0.2.tar.gz
tar xzf htop-1.0.2.tar.gz
cd htop-1.0.2
./configure
make &amp;&amp; make install
</code></pre>

<h2>示例图片</h2>

<p><img src="http://me.94313.net/images/2015/htop.gif" title="示例图片" alt="示例图片" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Htop是个好东西]]></title>
    <link href="http://me.94313.net/blog/2015/01/06/htop/"/>
    <updated>2015-01-06T13:49:16+08:00</updated>
    <id>http://me.94313.net/blog/2015/01/06/htop</id>
    <content type="html"><![CDATA[<pre><code>Htop是一款运行于Linux系统监控与进程管理软件，用于取代Unix下传统的top。与top只提供最消耗资源的进程列表不同，htop提供所有进程的列表，并且使用彩色标识出处理器、swap和内存状态。
</code></pre>

<p>用户一般可以在top无法提供详尽系统信息的情况下选择安装并使用htop。比如，在查找应用程序的内存泄漏问题时。与top相比，htop提供更方便、光标控制的界面来杀死进程。
htop用C语言编写，采用了ncurses库。htop的名称源于其作者的名字。</p>

<h2>安装-htop</h2>

<pre><code>yum -y install ncurses-devel #htop依赖ncurses
cd /opt
wget -c http://ncu.dl.sourceforge.net/project/htop/htop/1.0.2/htop-1.0.2.tar.gz
tar xzf htop-1.0.2.tar.gz
cd htop-1.0.2
./configure
make &amp;&amp; make install
</code></pre>

<h2>示例图片</h2>

<p><img src="http://me.94313.net/images/2015/htop.gif" title="示例图片" alt="示例图片" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Css-clearfix]]></title>
    <link href="http://me.94313.net/blog/2014/10/19/css-clearfix/"/>
    <updated>2014-10-19T11:20:41+08:00</updated>
    <id>http://me.94313.net/blog/2014/10/19/css-clearfix</id>
    <content type="html"><![CDATA[<pre><code>&lt;style&gt;
.clearfix:after{
    visibility: hidden;
    display: block;
    font-size: 0;
    content: ".";
    clear: both;
    height: 0;
}

* html .clearfix{zoom: 1;}
*:first-child + html .clearfix{zoom: 1;}
&lt;/style&gt;
&lt;div class="clearfix" style="border: 2px solid red;"&gt;
    &lt;div style="float: left; width: 80px; height: 80px; border: 1px solid blue;"&gt;TEST DIV&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<h3>说明：</h3>

<ol>
<li>首先是利用:after这个伪类来兼容FF、Chrome等支持标准的浏览器。:after伪类IE不支持，它用来和content属性一起使用设置在对象后的内容，例如：a:after{content:&ldquo;(link)&rdquo;;}这个CSS将会让a标签内的文本后边加上link文本文字。</li>
<li>利用“* html”这个只有IE6认识的选择符，设置缩放属性“zoom: 1;”实现兼容IE6。</li>
<li>利用“*:first-child + html”这个只有IE7认识的选择符，设置缩放属性“zoom: 1;”实现兼容IE7。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[经营一个网站需要哪些牌照资质]]></title>
    <link href="http://me.94313.net/blog/2014/10/19/wangzhan-paizhao/"/>
    <updated>2014-10-19T10:58:37+08:00</updated>
    <id>http://me.94313.net/blog/2014/10/19/wangzhan-paizhao</id>
    <content type="html"><![CDATA[<ul>
<li>信息产业部ICP备案,主要是针对非经营性网站，任何一个在国内的网站都要备案。审批机构：工业与信息化部</li>
<li>电信与信息服务业务经营许可证(ICP)主要是针对经营性互联网信息服务网站，注册资金要求100万以上，北京的证叫这个名字，全国其它地方的证的名称为“增值电信业务经营许可证”，经营范围为 互联网信息服务业务。审批机构：各地通信管理局</li>
<li>电子公告服务:电信业务审批主要是针对设有电子公告服务(bbs)论坛网站。审批机构：各 地通信管理局</li>
<li>经营性网站备案,经营性网站备案，是指经营性网站向工商行政管理机关申请备案，工商行政管 理机关在网站的首页上加贴经营性网站备案电子标识，并将备案信息向社会公开。审批机构：北京市工商行政管理局</li>
<li>增值电信业务经营许可证(移动网信息服务业务SP)主要是针对提供移动网无线增值信息服 务业务需要办理的。审批机构：各地通信管理局</li>
<li>互联网新闻信息服务许可证主要针对从事登载新闻业务的网站。审批机构：国务院新闻办</li>
<li>网络文化经营许可证主要针对经营互联网文化产品和提供互联网文化产品及其服务的网站。审批机构：省级文化行政部门（2010.08.01日开始下放到省级）</li>
<li>互联网药品信息服务资格证书主要针对经营互联网药品信息服务的网站。审批机构：北京 市药品监督管理局</li>
<li>互联网出版许可证主要针对经营互联网出版类电子商务业务的网站。审批机构：新闻出版总署</li>
<li>网络视听节目传播许可证（有新旧之分，新的目前据传只有5家）信息网络视听节目许可证》由广电总局按照信息网络传播视听节目的业务类别、接收终端、传输网络等项目分类核发。 审批机构：广电总局</li>
<li>互联网卫生信息服务管理主要针对经营互联网卫生信息服务业务的网站。审批机构：北京市卫生局</li>
<li>电子支付牌照（即将推出）主要是对电子支付企业实行牌照制度，传闻在今年第一季度发放，大概包括支付宝在内的10家公司可获得牌照。 审批机构：中国人民银行</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 的 Prompt 转义字符]]></title>
    <link href="http://me.94313.net/blog/2014/10/19/mysql-shell-prompt-metachar/"/>
    <updated>2014-10-19T10:53:38+08:00</updated>
    <id>http://me.94313.net/blog/2014/10/19/mysql-shell-prompt-metachar</id>
    <content type="html"><![CDATA[<pre><code>\c    ：A counter that increments for each statement you issue
\D    ：The full current date
\d    ：The default database
\h    ：The server host
\l    ：The current delimiter (new in 5.1.12)
\m    ：Minutes of the current time
\n    ：A newline character
\O    ：The current month in three-letter format (Jan, Feb, …)
\o    ：The current month in numeric format
\P    ：am/pm
\p    ：The current TCP/IP port or socket file
\R    ：The current time, in 24-hour military time (0–23)
\r    ：The current time, standard 12-hour time (1–12)
\S    ：Semicolon
\s    ：Seconds of the current time
\t    ：A tab character
\U    ：Your full user_name@host_name account name
\u    ：Your user name
\v    ：The server version
\w    ：The current day of the week in three-letter format (Mon, Tue, …)
\Y    ：The current year, four digits
\y    ：The current year, two digits
\_    ：A space
\A    ：space (a space follows the backslash)
\'    ：Single quote
\"    ：Double quote
\\    ：A literal “\” backslash character
\x    ：x, for any “x” not listed above
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed-man-page]]></title>
    <link href="http://me.94313.net/blog/2014/09/01/sed-man-page/"/>
    <updated>2014-09-01T18:30:03+08:00</updated>
    <id>http://me.94313.net/blog/2014/09/01/sed-man-page</id>
    <content type="html"><![CDATA[<p>NAME
       sed - stream editor for filtering and transforming text</p>

<p>SYNOPSIS
       sed [OPTION]&hellip; {script-only-if-no-other-script} [input-file]&hellip;</p>

<p>DESCRIPTION
       Sed  is  a stream editor.  A stream editor is used to perform basic text transformations on an input stream (a file
       or input from a pipeline).  While in some ways similar to an editor which permits scripted edits (such as ed),  sed
       works  by  making  only one pass over the input(s), and is consequently more efficient.  But it is sed&rsquo;s ability to
       filter text in a pipeline which particularly distinguishes it from other types of editors.</p>

<pre><code>   -n, --quiet, --silent

          suppress automatic printing of pattern space

   -e script, --expression=script

          add the script to the commands to be executed

   -f script-file, --file=script-file

          add the contents of script-file to the commands to be executed

   --follow-symlinks

          follow symlinks when processing in place

   -i[SUFFIX], --in-place[=SUFFIX]

          edit files in place (makes backup if SUFFIX supplied)

   -b, --binary

          open files in binary mode (CR+LFs are not processed specially)

   -l N, --line-length=N

          specify the desired line-wrap length for the `l' command

   --posix

          disable all GNU extensions.

   -r, --regexp-extended

          use extended regular expressions in the script.

   -s, --separate

          consider files as separate rather than as a single continuous long stream.

   -u, --unbuffered

          load minimal amounts of data from the input files and flush the output buffers more often

   -z, --null-data

          separate lines by NUL characters

   --help
          display this help and exit

   --version
          output version information and exit

   If no -e, --expression, -f, or --file option is given, then the first non-option  argument  is  taken  as  the  sed
   script  to  interpret.  All remaining arguments are names of input files; if no input files are specified, then the
   standard input is read.

   GNU sed home page: &lt;http://www.gnu.org/software/sed/&gt;.  General help using GNU software:  &lt;http://www.gnu.org/geth‐
   elp/&gt;.   E-mail  bug  reports  to:  &lt;bug-sed@gnu.org&gt;.  Be sure to include the word ``sed'' somewhere in the ``Sub‐
   ject:'' field.
</code></pre>

<p>COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as a reminder to those who already know sed; other  documen‐
       tation (such as the texinfo document) must be consulted for fuller descriptions.</p>

<p>   Zero-address &ldquo;commands&rdquo;
       : label
              Label for b and t commands.</p>

<pre><code>   #comment
          The comment extends until the next newline (or the end of a -e script fragment).

   }      The closing bracket of a { } block.
</code></pre>

<p>   Zero- or One- address commands
       =      Print the current line number.</p>

<pre><code>   a \

   text   Append text, which has each embedded newline preceded by a backslash.

   i \

   text   Insert text, which has each embedded newline preceded by a backslash.

   q [exit-code]
          Immediately quit the sed script without processing any more input, except that if auto-print is not disabled
          the current pattern space will be printed.  The exit code argument is a GNU extension.

   Q [exit-code]
          Immediately quit the sed script without processing any more input.  This is a GNU extension.

   r filename
          Append text read from filename.

   R filename
          Append a line read from filename.  Each invocation of the command reads a line from the file.  This is a GNU
          extension.
</code></pre>

<p>   Commands which accept address ranges
       {      Begin a block of commands (end with a }).</p>

<pre><code>   b label
          Branch to label; if label is omitted, branch to end of script.

   c \

   text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.

   d      Delete pattern space.  Start next cycle.

   D      If  pattern  space contains no newline, start a normal new cycle as if the d command was issued.  Otherwise,
          delete text in the pattern space up to the first newline, and  restart  cycle  with  the  resultant  pattern
          space, without reading a new line of input.

   h H    Copy/append pattern space to hold space.

   g G    Copy/append hold space to pattern space.

   l      List out the current line in a ``visually unambiguous'' form.

   l width
          List  out  the  current line in a ``visually unambiguous'' form, breaking it at width characters.  This is a
          GNU extension.

   n N    Read/append the next line of input into the pattern space.

   p      Print the current pattern space.

   P      Print up to the first embedded newline of the current pattern space.

   s/regexp/replacement/
          Attempt to match regexp against the pattern  space.   If  successful,  replace  that  portion  matched  with
          replacement.   The  replacement  may contain the special character &amp; to refer to that portion of the pattern
          space which matched, and the special escapes \1 through \9 to  refer  to  the  corresponding  matching  sub-
          expressions in the regexp.

   t label
          If  a  s///  has done a successful substitution since the last input line was read and since the last t or T
          command, then branch to label; if label is omitted, branch to end of script.

   T label
          If no s/// has done a successful substitution since the last input line was read and since the last t  or  T
          command, then branch to label; if label is omitted, branch to end of script.  This is a GNU extension.

   w filename
          Write the current pattern space to filename.

   W filename
          Write the first line of the current pattern space to filename.  This is a GNU extension.

   x      Exchange the contents of the hold and pattern spaces.

   y/source/dest/
          Transliterate  the  characters in the pattern space which appear in source to the corresponding character in
          dest.
</code></pre>

<p>Addresses
       Sed commands can be given with no addresses, in which case the command will be executed for all input  lines;  with
       one  address, in which case the command will only be executed for input lines which match that address; or with two
       addresses, in which case the command will be executed for all input lines which match the inclusive range of  lines
       starting  from  the first address and continuing to the second address.  Three things to note about address ranges:
       the syntax is addr1,addr2 (i.e., the addresses are separated by a comma); the line which addr1 matched will  always
       be  accepted,  even  if  addr2 selects an earlier line; and if addr2 is a regexp, it will not be tested against the
       line that addr1 matched.</p>

<pre><code>   After the address (or address-range), and before the command, a !  may be inserted, which specifies that  the  com‐
   mand shall only be executed if the address (or address-range) does not match.

   The following address types are supported:

   number Match  only  the  specified line number (which increments cumulatively across files, unless the -s option is
          specified on the command line).

   first~step
          Match every step'th line starting with line first.  For example, ``sed -n 1~2p'' will print all the odd-num‐
          bered  lines in the input stream, and the address 2~5 will match every fifth line, starting with the second.
          first can be zero; in this case, sed operates as if it were equal to step.  (This is an extension.)

   $      Match the last line.

   /regexp/
          Match lines matching the regular expression regexp.

   \cregexpc
          Match lines matching the regular expression regexp.  The c may be any character.

   GNU sed also supports some special 2-address forms:

   0,addr2
          Start out in "matched first address" state, until addr2 is found.  This is similar to 1,addr2,  except  that
          if  addr2 matches the very first line of input the 0,addr2 form will be at the end of its range, whereas the
          1,addr2 form will still be at the beginning of its range.  This works only when addr2 is a  regular  expres‐
          sion.

   addr1,+N
          Will match addr1 and the N lines following addr1.

   addr1,~N
          Will  match addr1 and the lines following addr1 until the next line whose input line number is a multiple of
          N.
</code></pre>

<p>REGULAR EXPRESSIONS
       POSIX.2 BREs should be supported, but they aren&rsquo;t completely because of performance problems.  The \n sequence in a
       regular expression matches the newline character, and similarly for \a, \t, and other sequences.</p>

<p>BUGS
       E-mail  bug  reports  to <a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x62;&#x75;&#x67;&#x2d;&#x73;&#101;&#x64;&#x40;&#x67;&#x6e;&#x75;&#46;&#111;&#114;&#103;&#x2e;">&#98;&#x75;&#103;&#x2d;&#115;&#101;&#100;&#64;&#103;&#110;&#x75;&#46;&#111;&#114;&#x67;&#x2e;</a>  Also, please include the output of &ldquo;sed &ndash;version&rdquo; in the body of your
       report if at all possible.</p>

<p>AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken Pizzini, and Paolo Bonzini.  GNU sed  home  page:  &lt;<a href="http://www.gnu.org/soft%E2%80%90">http://www.gnu.org/soft%E2%80%90</a>
       ware/sed/>.   General  help  using  GNU  software:  <a href="http://www.gnu.org/gethelp/">http://www.gnu.org/gethelp/</a>.   E-mail  bug  reports to: <bug-
       sed@gnu.org>.  Be sure to include the word &ldquo;sed&rdquo; somewhere in the &ldquo;Subject:&rdquo; field.</p>

<p>COPYRIGHT
       Copyright  ©  2012  Free  Software   Foundation,   Inc.    License   GPLv3+:   GNU   GPL   version   3   or   later
       <a href="http://gnu.org/licenses/gpl.html">http://gnu.org/licenses/gpl.html</a>.
       This  is  free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted
       by law.</p>

<p>SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ
       (<a href="http://sed.sf.net/grabbag/tutorials/sedfaq.txt">http://sed.sf.net/grabbag/tutorials/sedfaq.txt</a>), <a href="http://sed.sf.net/grabbag/.">http://sed.sf.net/grabbag/.</a></p>

<pre><code>   The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly
   installed at your site, the command

          info sed

   should give you access to the complete manual.
</code></pre>

<p>sed 4.2.2                                                June 2013                                                  SED(1)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[html-DocType]]></title>
    <link href="http://me.94313.net/blog/2014/08/31/html-doctype/"/>
    <updated>2014-08-31T19:29:52+08:00</updated>
    <id>http://me.94313.net/blog/2014/08/31/html-doctype</id>
    <content type="html"><![CDATA[<p>&lt;!doctype html></p>

<ol>
<li>所有浏览器都支持 &lt;!DOCTYPE> 声明。</li>
<li>&lt;!DOCTYPE> 声明必须是 HTML 文档的第一行，位于 <html> 标签之前。</li>
<li>&lt;!DOCTYPE> 声明不是 HTML 标签；它是指示 web 浏览器关于页面使用哪个 HTML 版本进行编写的指令。</li>
<li>在 HTML 4.01 中，&lt;!DOCTYPE> 声明引用 DTD，因为 HTML 4.01 基于 SGML。</li>
<li>DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</li>
<li>HTML5 不基于 SGML，所以不需要引用 DTD。</li>
<li>&lt;!DOCTYPE> 声明没有结束标签。</li>
<li>&lt;!DOCTYPE> 声明对大小写不敏感。</li>
</ol>


<p>提示：请始终向 HTML 文档添加 &lt;!DOCTYPE> 声明，这样浏览器才能获知文档类型。</p>

<ul>
<li>HTML        1991</li>
<li>HTML+       1993</li>
<li>HTML 2.0    1995</li>
<li>HTML 3.2    1997</li>
<li>HTML 4.01   1999</li>
<li>XHTML 1.0   2000</li>
<li>HTML5       2012</li>
<li>XHTML5      2013</li>
</ul>


<p>常用的 DOCTYPE 声明如下
HTML 5
&lt;!DOCTYPE html></p>

<h3>HTML 4.01 Strict</h3>

<p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。
&lt;!DOCTYPE HTML PUBLIC &ldquo;-//W3C//DTD HTML 4.01//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/html4/strict.dtd">http://www.w3.org/TR/html4/strict.dtd</a>&rdquo;></p>

<h3>HTML 4.01 Transitional</h3>

<p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。
&lt;!DOCTYPE HTML PUBLIC &ldquo;-//W3C//DTD HTML 4.01 Transitional//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/html4/loose.dtd">http://www.w3.org/TR/html4/loose.dtd</a>&rdquo;></p>

<h3>HTML 4.01 Frameset</h3>

<p>该 DTD 等同于 HTML 4.01 Transitional，但允许框架集内容。
&lt;!DOCTYPE HTML PUBLIC &ldquo;-//W3C//DTD HTML 4.01 Frameset//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/html4/frameset.dtd">http://www.w3.org/TR/html4/frameset.dtd</a>&rdquo;></p>

<h3>XHTML 1.0 Strict</h3>

<p>该 DTD 包含所有 HTML 元素和属性，但不包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Strict//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>&rdquo;></p>

<h3>XHTML 1.0 Transitional</h3>

<p>该 DTD 包含所有 HTML 元素和属性，包括展示性的和弃用的元素（比如 font）。不允许框架集（Framesets）。必须以格式正确的 XML 来编写标记。
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Transitional//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</a>&rdquo;></p>

<h3>XHTML 1.0 Frameset</h3>

<p>该 DTD 等同于 XHTML 1.0 Transitional，但允许框架集内容。
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.0 Frameset//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd</a>&rdquo;></p>

<h3>XHTML 1.1</h3>

<p>该 DTD 等同于 XHTML 1.0 Strict，但允许添加模型（例如提供对东亚语系的 ruby 支持）。
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD XHTML 1.1//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>&rdquo;></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux-有用的命令]]></title>
    <link href="http://me.94313.net/blog/2014/08/31/linux-useful-command/"/>
    <updated>2014-08-31T18:57:18+08:00</updated>
    <id>http://me.94313.net/blog/2014/08/31/linux-useful-command</id>
    <content type="html"><![CDATA[<p>下面我将和大家分享一些学习Linux命令行的技巧，希望能对大家有所助益。如果在本文中遇到不太熟悉的命令，可以在终端中键入以下命令寻求帮助。
Man <command>
 Linux入门必备
了解bash：没有必要钻研长篇累牍的bash使用手册，通过man bash学习即可。
了解vi：你在工作中也许会使用Emacs或Eclipse，但vi不可替代。
了解ssh：学习无密码验证的基础知识。
bash作业管理基础知识：如使用&amp;、Ctrl-C、fg、bg、Ctrl-Z、jobs和kill等。
文件管理命令：如硬链接和软链接，权限等。
网络管理命令：如ifconfig等。
如何使用正则表达式，如何使用grep、sed等。
学习使用apt-get和yum管理软件包。
提升日常工作效率</p>

<p>在bash中，可以使用Ctrl+R命令搜索命令行历史记录。
在bash中，可以使用Ctrl+W删除最后一个单词，使用Ctrl+U删除整行。
使用cd -命令返回之前的工作目录，使用cd ..命令返回上层目录。
学习如何使用xargs：
$ find . -name *.py | xargs grep some_function<br/>
$ cat hosts | xargs -I{} ssh root@{} hostnameX
使用pstree -p命令查看进程树。
了解不同的信号。例如，使用kill -STOP [PID]终止进程。详细的信号列表可以在man 7 signal中查看。
如果你想让进程永远在后台运行，可以使用nohup和disown命令。
使用netstat -lntp命令查看侦听进程，并参考lsof命令。
在bash脚本中使用subshells对命令进行分组：</p>

<h1>do something in current dir</h1>

<p>(cd /some/other/dir; other-command)</p>

<h1>continue in original dir</h1>

<p>字符串修剪（Trimming Strings）：${var%suffix}和${var#prefix}。例如if var=foo.pdf then echo ${var%.pdf}.txt prints &ldquo;foo.txt&#8221;。
命令的输出可以当做文件使用。例如，比较本地和远程的/etc/hosts文件：
diff /etc/hosts &lt;(ssh somehost cat /etc/hosts)
了解bash中的“here documents”。
了解标准输出和标准错误重定向。
了解ASCII代码表。可以在终端中运行man ascii命令作为参考。
当通过ssh远程工作时，可以使用screen 或 dtach保存回话。
对Web开发者而言，curl、wget等命令非常实用。
将HTML页面转化文本文件：
lynx -dump -stdin
如果要掌握XML，xmlstarlet命令是非常好的工具。
了解ssh端口映射。
使用Alt+shift+3快捷键可以在行前添加注释“#”。
数据处理</p>

<p>了解sort和uniq命令。
了解cut、paste和join命令。
了解如何对文本文件做交集、并集和差集：
cat a b | sort | uniq > c # c is a union b<br/>
cat a b | sort | uniq -d > c # c is a intersect b<br/>
cat a b b | sort | uniq -u > c # c is set difference a – b
对文本文件的第二列做摘要，下面的代码要比同样的Python代码更精炼、快速（3倍）：
awk &lsquo;{ x += $2 } END { print x }&rsquo;
了解字符串和grep命令。
文件分割：了解split（按大小分割）和csplit（按匹配分割）命令。
系统诊断</p>

<p>使用iostat、netstat、top和dstat命令查看磁盘、处理器和网络的状态。
使用free、vmstat等命令了解系统内存状态。
使用mtr网络诊断工具。
使用iftop、nethogs等工具查看占用带宽的进程和带宽。
使用ab工具快速洞悉Web服务器的性能。
以wireshark和tshark命令应对复杂网络诊断。
学习如何使用strace，并用于诊断运行的进程。这对分析程序运行错误的原因，非常有帮助。
使用ldd命令查看共享库文件。
了解如何使用gdb连接到运行中的进程，并进行堆栈跟踪。
有关/proc的知识非常重要。
如何诊断已发生的错误？Sar命令是一种很好的选择，它可以收集、保存并报告系统信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache处理http请求的生命周期]]></title>
    <link href="http://me.94313.net/blog/2014/08/31/apache-http-request-process/"/>
    <updated>2014-08-31T09:49:40+08:00</updated>
    <id>http://me.94313.net/blog/2014/08/31/apache-http-request-process</id>
    <content type="html"><![CDATA[<p>Apache请求处理循环的11个阶段都做了哪些事情呢？</p>

<ol>
<li>Post-Read-Request阶段: 在正常请求处理流程中，这是模块可以插入钩子的第一个阶段。对于那些想很早进入处理请求的模块来说，这个阶段可以被利用。</li>
<li>URI Translation阶段 :  Apache在本阶段的主要工作：将请求的URL映射到本地文件系统。模块可以在这阶段插入钩子，执行自己的映射逻辑。mod_alias就是利用这个阶段工作的。</li>
<li>Header Parsing阶段 : Apache在本阶段的主要工作：检查请求的头部。由于模块可以在请求处理流程的任何一个点上执行检查请求头部的任务，因此这个钩子很少被使用。mod_setenvif就是利用这个阶段工作的。</li>
<li>Access Control阶段 :  Apache在本阶段的主要工作：根据配置文件检查是否允许访问请求的资源。Apache的标准逻辑实现了允许和拒绝指令。mod_authz_host就是利用这个阶段工作的。</li>
<li>Authentication阶段 :  Apache在本阶段的主要工作：按照配置文件设定的策略对用户进行认证，并设定用户名区域。模块可以在这阶段插入钩子，实现一个认证方法。</li>
<li>Authorization阶段 :  Apache在本阶段的主要工作：根据配置文件检查是否允许认证过的用户执行请求的操作。模块可以在这阶段插入钩子，实现一个用户权限管理的方法。</li>
<li>MIME Type Checking阶段 :  Apache在本阶段的主要工作：根据请求资源的MIME类型的相关规则，判定将要使用的内容处理函数。标准模块mod_negotiation和mod_mime实现了这个钩子。</li>
<li>FixUp阶段 :  这是一个通用的阶段，允许模块在内容生成器之前，运行任何必要的处理流程。和Post_Read_Request类似，这是一个能够捕获任何信息的钩子，也是最常使用的钩子。</li>
<li>Response阶段 : Apache在本阶段的主要工作：生成返回客户端的内容，负责给客户端发送一个恰当的回复。这个阶段是整个处理流程的核心部分。</li>
<li>Logging阶段 :  Apache在本阶段的主要工作：在回复已经发送给客户端之后记录事务。模块可能修改或者替换Apache的标准日志记录。</li>
<li>CleanUp阶段 : Apache在本阶段的主要工作：清理本次请求事务处理完成之后遗留的环境，比如文件、目录的处理或者Socket的关闭等等，这是Apache一次请求处理的最后一个阶段。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Break 关键字]]></title>
    <link href="http://me.94313.net/blog/2014/08/31/php-break-keywork/"/>
    <updated>2014-08-31T09:26:19+08:00</updated>
    <id>http://me.94313.net/blog/2014/08/31/php-break-keywork</id>
    <content type="html"><![CDATA[<p>php的break关键字可以接受一个可选的数字参数来决定跳出几重循环
break 结束当前 for，foreach，while，do-while 或者 switch 结构的执行。
break可以接受一个可选的数字参数来决定跳出几重循环。</p>

<pre><code>&lt;?php
    $arr = array('one', 'two', 'three', 'four', 'stop', 'five');
    while (list (, $val) = each($arr)) {
        if ($val == 'stop') {
            break;    /* You could also write 'break 1;' here. */
        }
        echo "$val&lt;br /&gt;\n";
    }

    /* Using the optional argument. */

    $i = 0;
    while (++$i) {
        switch ($i) {
        case 5:
            echo "At 5&lt;br /&gt;\n";
            break 1;  /* Exit only the switch. */
        case 10:
            echo "At 10; quitting&lt;br /&gt;\n";
            break2;  /* Exit the switch and the while. */
        default:
            break;
        }
    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress添加分类到侧边栏]]></title>
    <link href="http://me.94313.net/blog/2014/05/20/octopress-add-category2rightaside/"/>
    <updated>2014-05-20T23:02:11+08:00</updated>
    <id>http://me.94313.net/blog/2014/05/20/octopress-add-category2rightaside</id>
    <content type="html"><![CDATA[<h2>增加category_list插件</h2>

<p>保存以下代码到plugins/category_list_tag.rb：</p>

<pre><code>module Jekyll
  class CategoryListTag &lt; Liquid::Tag
    def render(context)
      html = ""
      categories = context.registers[:site].categories.keys
      categories.sort.each do |category|
        posts_in_category = context.registers[:site].categories[category].size
        category_dir = context.registers[:site].config['category_dir']
        category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
        html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://me.94313.net/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
      end
      html
    end
  end
end
</code></pre>

<p>Liquid::Template.register_tag(&lsquo;category_list&rsquo;, Jekyll::CategoryListTag)<br/>
这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside。</p>

<h2>增加aside</h2>

<p>复制以下代码到source/_includes/asides/category_list.html。</p>

<pre><code>&lt;section&gt;
  &lt;h1&gt;Categories&lt;/h1&gt;
  &lt;ul id="categories"&gt;
    { % category_list % }
  &lt;/ul&gt;
&lt;/section&gt;
</code></pre>

<h2>配置侧边栏需要修改_config.yml文件，修改其default_asides项：</h2>

<p>default_asides: [asides/category_list.html, asides/recent_posts.html]<br/>
以上asides根据自己的需求调整。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一致性哈希算法浅析]]></title>
    <link href="http://me.94313.net/blog/2014/01/31/consistent-hashing/"/>
    <updated>2014-01-31T10:27:40+08:00</updated>
    <id>http://me.94313.net/blog/2014/01/31/consistent-hashing</id>
    <content type="html"><![CDATA[<p>在做服务器负载均衡时候可供选择的负载均衡的算法有很多，包括：</p>

<ul>
<li>轮循算法（Round Robin）</li>
<li>哈希算法（HASH）</li>
<li>最少连接算法（Least Connection）</li>
<li>响应速度算法（Response Time）</li>
<li>加权法（Weighted ）等</li>
</ul>


<p> 其中哈希算法是最为常用的算法.
典型的应用场景是： 有N台服务器提供缓存服务，需要对服务器进行负载均衡，将请求平均分发到每台服务器上，每台机器负责1/N的服务。
常用的算法是对hash结果取余数 (hash() mod N)：对机器编号从0到N-1，按照自定义的hash()算法，对每个请求的hash()值按N取模，得到余数i，然后将请求分发到编号为i的机器。但这样的算法方法存在致命问题，如果某一台机器宕机，那么应该落在该机器的请求就无法得到正确的处理，这时需要将当掉的服务器从算法从去除，此时候会有(N-1)/N的服务器的缓存数据需要重新进行计算；如果新增一台机器，会有N /(N+1)的服务器的缓存数据需要进行重新计算。对于系统而言，这通常是不可接受的颠簸（因为这意味着大量缓存的失效或者数据需要转移）。那么，如何设计一个负载均衡策略，使得受到影响的请求尽可能的少呢？
在Memcached、Key-Value Store、Bittorrent DHT、LVS中都采用了Consistent Hashing算法，可以说Consistent Hashing 是分布式系统负载均衡的首选算法。
1、Consistent Hashing算法描述
下面以Memcached中的Consisten Hashing算法为例说明。
由于hash算法结果一般为unsigned int型，因此对于hash函数的结果应该均匀分布在[0,232-1]间，如果我们把一个圆环用232 个点来进行均匀切割，首先按照hash(key)函数算出服务器（节点）的哈希值， 并将其分布到0～232的圆上。
用同样的hash(key)函数求出需要存储数据的键的哈希值，并映射到圆上。然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器（节点）上。</p>

<p><img src="http://me.94313.net/images/consistent-hashing-01.png" alt="consistent hashing" /></p>

<p>Consistent Hashing原理示意图
新增一个节点的时候，只有在圆环上新增节点逆时针方向的第一个节点的数据会受到影响。删除一个节点的时候，只有在圆环上原来删除节点顺时针方向的第一个节点的数据会受到影响，因此通过Consistent Hashing很好地解决了负载均衡中由于新增节点、删除节点引起的hash值颠簸问题。</p>

<p><img src="http://me.94313.net/images/consistent-hashing-02.png" alt="consistent hashing" /></p>

<p>Consistent Hashing添加服务器示意图
虚拟节点（virtual nodes）：之所以要引进虚拟节点是因为在服务器（节点）数较少的情况下（例如只有3台服务器），通过hash(key)算出节点的哈希值在圆环上并不是均匀分布的（稀疏的），仍然会出现各节点负载不均衡的问题。虚拟节点可以认为是实际节点的复制品（replicas），本质上与实际节点实际上是一样的（key并不相同）。引入虚拟节点后，通过将每个实际的服务器（节点）数按照一定的比例(例如200倍)扩大后并计算其hash(key)值以均匀分布到圆环上。在进行负载均衡时候，落到虚拟节点的哈希值实际就落到了实际的节点上。由于所有的实际节点是按照相同的比例复制成虚拟节点的，因此解决了节点数较少的情况下哈希值在圆环上均匀分布的问题。</p>

<p><img src="http://me.94313.net/images/consistent-hashing-03.png" alt="consistent hashing" /></p>

<p>虚拟节点对Consistent Hashing结果的影响
从上图可以看出，在节点数为10个的情况下，每个实际节点的虚拟节点数为实际节点的100-200倍的时候，结果还是很均衡的。</p>

<p>第3段中有这些文字：“但这样的算法方法存在致命问题，如果某一台机器宕机，那么应该落在该机器的请求就无法得到正确的处理，这时需要将当掉的服务器从算法从去除，此时候会有(N-1)/N的服务器的缓存数据需要重新进行计算；”
为何是 (N-1)/N 呢？解释如下：
  比如有 3 台机器，hash值 1-6 在这3台上的分布就是：
  host 1: 1 4
  host 2: 2 5
  host 3: 3 6
  如果挂掉一台，只剩两台，模数取 2 ，那么分布情况就变成：
  host 1: 1 3 5
  host 2: 2 4 6
可以看到，还在数据位置不变的只有2个： 1，2，位置发生改变的有4个，占共6个数据的比率是 4/6 = 2/3
这样的话，受影响的数据太多了，势必太多的数据需要重新从 DB 加载到 cache 中，严重影响性能</p>

<p>【consistent hashing 的办法】
上面提到的 hash 取模，模数取的比较小，一般是负载的数量，而 consistent hashing 的本质是将模数取的比较大，为 2的32次方减1，即一个最大的 32 位整数。然后，就可以从容的安排数据导向了，那个图还是挺直观的
以下部分为一致性哈希算法的一种PHP实现。
下载地址 ：<a href="http://zwzweb.googlecode.com/files/Consistent%20Hashing.php">http://zwzweb.googlecode.com/files/Consistent%20Hashing.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery.extend()函数注释说明]]></title>
    <link href="http://me.94313.net/blog/2013/08/30/jquery-extend-method/"/>
    <updated>2013-08-30T14:11:50+08:00</updated>
    <id>http://me.94313.net/blog/2013/08/30/jquery-extend-method</id>
    <content type="html"><![CDATA[<ul>
<li>// 第一个参数是true，则会迭代合并</li>
<li>// 合并两个或更多对象的属性到第一个对象中，jQuery后续的大部分功能都通过该函数扩展</li>
<li>// 通过jQuery.fn.extend扩展的函数，大部分都会调用通过jQuery.extend扩展的同名函数</li>
<li>// 如果传入两个或多个对象，所有对象的属性会被添加到第一个对象target</li>
<li>// 如果只传入一个对象，则将对象的属性添加到jQuery对象中。</li>
<li>// 用这种方式，我们可以为jQuery命名空间增加新的方法。可以用于编写jQuery插件。</li>
<li>// 如果不想改变传入的对象，可以传入一个空对象：$.extend({}, object1, object2);</li>
<li>// 默认合并操作是不迭代的，即便target的某个属性是对象或属性，也会被完全覆盖而不是合并</li>
<li>// 从object原型继承的属性会被拷贝</li>
<li>// undefined值不会被拷贝</li>
<li>// 因为性能原因，JavaScript自带类型的属性不会合并</li>
<li>// jQuery.extend( target, [ object1 ], [ objectN ] )</li>
<li>// jQuery.extend( [ deep ], target, object1, [ objectN ] )</li>
</ul>


<pre>
    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
           target = arguments[0] || {},
           i = 1,
           length = arguments.length,
           deep = false;

        // Handle a deep copy situation
        // 如果第一个参数是boolean型，可能是深度拷贝
        if ( typeof target === "boolean" ) {
           deep = target;
           target = arguments[1] || {};
           // skip the boolean and the target
           // 跳过boolean和target，从第3个开始
           i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        // target不是对象也不是函数，则强制设置为空对象
        if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
           target = {};
        }

        // extend jQuery itself if only one argument is passed
        // 如果只传入一个参数，则认为是对jQuery扩展
        if ( length === i ) {
           target = this;
           --i;
        }

        for ( ; i < length; i++ ) {
           // Only deal with non-null/undefined values
           // 只处理非空参数
           if ( (options = arguments[ i ]) != null ) {
               // Extend the base object
               for ( name in options ) {
                  src = target[ name ];
                  copy = options[ name ];

                  // Prevent never-ending loop
                  // 避免循环引用
                  if ( target === copy ) {
                      continue;
                  }

                  // Recurse if we're merging plain objects or arrays
                  // 深度拷贝且值是纯对象或数组，则递归
                  if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
                      // 如果copy是数组
                      if ( copyIsArray ) {
                         copyIsArray = false;
                         // clone为src的修正值
                         clone = src && jQuery.isArray(src) ? src : [];
                      // 如果copy的是对象
                      } else {
                         // clone为src的修正值
                         clone = src && jQuery.isPlainObject(src) ? src : {};
                      }

                      // Never move original objects, clone them
                      // 递归调用jQuery.extend
                      target[ name ] = jQuery.extend( deep, clone, copy );

                  // Don't bring in undefined values
                  // 不能拷贝空值
                  } else if ( copy !== undefined ) {
                      target[ name ] = copy;
                  }
               }
           }
        }

        // Return the modified object
        // 返回更改后的对象
        return target;
    };
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用栈来找路径]]></title>
    <link href="http://me.94313.net/blog/2012/12/06/use-of-stack/"/>
    <updated>2012-12-06T09:46:51+08:00</updated>
    <id>http://me.94313.net/blog/2012/12/06/use-of-stack</id>
    <content type="html"><![CDATA[<p><img src="http://me.94313.net/images/use-of-stack-01.png" alt="示例图片-01" />
代码如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!DOCTYPE html&gt;
</span><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;title&gt; 数据结构-栈的应用 &lt;/title&gt;
</span><span class='line'>&lt;meta http-equiv="Content-type" content="text/html;charset=utf-8;" &gt;
</span><span class='line'>&lt;style&gt;
</span><span class='line'>*{margin:0;padding:0;}
</span><span class='line'>#container .line{display:block;float:left;}
</span><span class='line'>.block{width:15px;height:15px;float:left;font-size:8px;border-right:1px solid #111;border-bottom:1px solid #111;}
</span><span class='line'>.bld{background:black;color:#fff;}
</span><span class='line'>.start{background:red;color:#fff;}
</span><span class='line'>.end{background:red;color:#f00;}
</span><span class='line'>.route{background:red;}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;script type="text/javascript" src="https://cdn.bootcss.com/jquery/1.12.1/jquery.min.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>    &lt;h1&gt;使用栈来找路径&lt;/h1&gt;
</span><span class='line'>    &lt;p&gt;
</span><span class='line'>    查找从左上角到右下角的路径，图中的方块表示障碍；点击方块可以改变其状态（通或者不通）
</span><span class='line'>    &lt;/p&gt;
</span><span class='line'>&lt;button text='clear' id="btn-clear"&gt;清除路径&lt;/button&gt;
</span><span class='line'>&lt;button text='clear' id="btn-find"&gt;查找路径&lt;/button&gt;
</span><span class='line'>  &lt;div id='container'&gt;&lt;/div&gt;
</span><span class='line'>  &lt;script type="text/javascript"&gt;
</span><span class='line'>&lt;!--
</span><span class='line'>/***** 入口函数 ****/
</span><span class='line'>$(function(){
</span><span class='line'>    init();
</span><span class='line'>    addEvents();
</span><span class='line'>});
</span><span class='line'>   
</span><span class='line'>function init(){
</span><span class='line'>   
</span><span class='line'>    window.M_x = 70;  //矩阵的宽和高
</span><span class='line'>    window.M_y = 45;
</span><span class='line'>    window.Matrix = createMatrix(M_x , M_y);
</span><span class='line'>   
</span><span class='line'>    showMatrixAsDivBlock(M_x , M_y);
</span><span class='line'>    setDisableBlocks(M_x , M_y , 1100);
</span><span class='line'>   
</span><span class='line'>    var n1 = [2  , 2];
</span><span class='line'>    var n2 = [M_y-2 ,M_x-2];
</span><span class='line'>    window.startNode = n1;
</span><span class='line'>    window.endNode = n2;
</span><span class='line'>   
</span><span class='line'>    $(getid(n1)).addClass('start').addClass('route').text('from');
</span><span class='line'>    $(getid(n2)).addClass('end').addClass('route').text('end');
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>/****创建界面****/
</span><span class='line'>function showMatrixAsDivBlock(x , y){
</span><span class='line'>    var div =[]
</span><span class='line'>    var line=[];
</span><span class='line'>    var i , j;
</span><span class='line'>    for(i = 1 ; i &lt; y ; i++){
</span><span class='line'>        for(j = 1 ; j &lt; x ; j++){
</span><span class='line'>            line[j] = "&lt;div id='b-"+i+'-'+j+"' class='block'&gt;&lt;/div&gt;";
</span><span class='line'>        }
</span><span class='line'>        div[i] = '&lt;div class="line"&gt;' + line.join('') + '&lt;/div&gt;';
</span><span class='line'>    }
</span><span class='line'>    $('#container').html(div.join('')+'&lt;div style="clear:both;"&gt;&lt;/div&gt;');
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>/*****创建矩阵****/
</span><span class='line'>function createMatrix(M_x , M_y){
</span><span class='line'>    var Matrix = [];
</span><span class='line'>    for(i = 1; i &lt; M_y; i++){
</span><span class='line'>        Matrix[i] = [];
</span><span class='line'>        for(j = 1; j &lt; M_x; j++){
</span><span class='line'>            if(i==1 || i==M_y-1 || j==1 || j==M_x-1){
</span><span class='line'>                var s = true;
</span><span class='line'>            }else{
</span><span class='line'>                var s = false;
</span><span class='line'>            }
</span><span class='line'>            Matrix[i][j] = {
</span><span class='line'>                disable :s    /// 标示当前的节点是否为阻断 1 ：阻断 ，0 ：联通
</span><span class='line'>                ,x      :i   /// 标示当前节点的x坐标
</span><span class='line'>                ,y      :j   /// 标示当前节点的y坐标
</span><span class='line'>                ,inRoute:false ///标示当前节点是否在路径中
</span><span class='line'>                ,direction:{    /// 标示当前节点四个方向是否被遍历过
</span><span class='line'>                    left:0 , bottom:0 , right:0 , top:0
</span><span class='line'>                }
</span><span class='line'>            };
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return Matrix;
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>/*将所有的障碍设置起来*/
</span><span class='line'>function setDisableBlocks(M_x , M_y , count){
</span><span class='line'>       
</span><span class='line'>    var i ; var j;
</span><span class='line'>    for(i=1 ; i&lt; M_y ; i++){
</span><span class='line'>        for(j=1 ; j &lt; M_x ; j++){
</span><span class='line'>            if(i==1 || j == 1 || i == M_y-1 || j == M_x-1){
</span><span class='line'>                Matrix[i][j].disable = true;
</span><span class='line'>                $('#b-'+i+'-'+j).addClass('bld');    
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    while(count){
</span><span class='line'>        i = parseInt((Math.random() * 10000))% M_y;
</span><span class='line'>        j = parseInt((Math.random() * 10000))% M_x;
</span><span class='line'>        if((i==2 && j==2) || (i==M_y-2 && j ==M_x-2)){
</span><span class='line'>            continue;
</span><span class='line'>        }
</span><span class='line'>        if(i &gt; 1 && i &lt; M_y && j &gt; 1 && j &lt; M_x){
</span><span class='line'>               
</span><span class='line'>            Matrix[i][j].disable = true;
</span><span class='line'>            $('#b-'+i+'-'+j).addClass('bld');
</span><span class='line'>            count--;
</span><span class='line'>        }                
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>/***设置所有“方块”以及两个按钮的单击事件***/
</span><span class='line'>function addEvents(){
</span><span class='line'>   
</span><span class='line'>    /**清除路径按钮**/
</span><span class='line'>    $('#btn-clear').click(function(){
</span><span class='line'>        for(i = 1 ; i &lt; M_y ; i++){
</span><span class='line'>            for(j = 1 ; j &lt; M_x ; j++){
</span><span class='line'>               var o = window.Matrix[i][j];
</span><span class='line'>               o.inRoute = false;
</span><span class='line'>               o.direction={left:0 , bottom:0 , right:0 , top:0};
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        if(window.Stack){
</span><span class='line'>            for(i=0 ; i &lt; Stack.length ; i++){
</span><span class='line'>                var o = Stack[i];
</span><span class='line'>                $(getid([o.x , o.y])).removeClass('route').html('');
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>   
</span><span class='line'>    /**查找路径按钮**/
</span><span class='line'>    $('#btn-find').click(function(){
</span><span class='line'>        $('#btn-clear').click();
</span><span class='line'>        find(window.Matrix ,window.startNode , window.endNode);
</span><span class='line'>    });
</span><span class='line'>       
</span><span class='line'>    /** 方块单击事件**/
</span><span class='line'>    $('.block').click(function(){
</span><span class='line'>        var id = $(this).attr('id');
</span><span class='line'>        var ary = id.split('-');
</span><span class='line'>        var i = ary[1];
</span><span class='line'>        var j = ary[2];
</span><span class='line'>        if(i == 1 || j == 1 || i == M_y || j == M_x){;}else{// 不能改变四个边的状态   
</span><span class='line'>            Matrix[i][j].disable = !Matrix[i][j].disable;
</span><span class='line'>            $('#'+id).toggleClass('bld');
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>// 查找路径
</span><span class='line'>function find(Matrix , n1 , n2){
</span><span class='line'>    // 先标示 起点和终点
</span><span class='line'>    $(getid(n1)).addClass('start').addClass('route').text('from');
</span><span class='line'>    $(getid(n2)).addClass('end').addClass('route').text('end');
</span><span class='line'>       
</span><span class='line'>    var start = getObject(Matrix , n1);
</span><span class='line'>    var end   = getObject(Matrix , n2)
</span><span class='line'>    var cur = start;
</span><span class='line'>   
</span><span class='line'>    window.Stack = Stack = [];
</span><span class='line'>    start.inRoute = true;
</span><span class='line'>   
</span><span class='line'>    while(true){
</span><span class='line'>        if(cur.direction.left == 0 && (o = getObject(Matrix , [cur.x , cur.y+1])) && !o.disable ){// && !o.inRoute){
</span><span class='line'>               
</span><span class='line'>            cur.direction.left=1;
</span><span class='line'>            o.direction.right=1;
</span><span class='line'>            o.inRoute = true;
</span><span class='line'>            Stack.push(cur);
</span><span class='line'>            Stack.push(o);
</span><span class='line'>            cur = o;
</span><span class='line'>   
</span><span class='line'>        }else if(cur.direction.bottom == 0 && (o = getObject(Matrix , [cur.x+1 , cur.y])) && !o.disable ){// && !o.inRoute){
</span><span class='line'>       
</span><span class='line'>            cur.direction.bottom=1;
</span><span class='line'>            o.direction.top=1;
</span><span class='line'>            o.inRoute = true;
</span><span class='line'>            Stack.push(cur);
</span><span class='line'>            Stack.push(o);  
</span><span class='line'>            cur = o;
</span><span class='line'>   
</span><span class='line'>        }else if(cur.direction.right == 0 && (o = getObject(Matrix , [cur.x , cur.y-1])) && !o.disable){// && !o.inRoute){
</span><span class='line'>               
</span><span class='line'>            cur.direction.right=1;
</span><span class='line'>            o.direction.left=1;
</span><span class='line'>            o.inRoute = true;
</span><span class='line'>            Stack.push(cur);
</span><span class='line'>            Stack.push(o);  
</span><span class='line'>            cur = o;
</span><span class='line'>   
</span><span class='line'>        }else if(cur.direction.top == 0 && (o = getObject(Matrix , [cur.x-1 , cur.y])) && !o.disable ){// && !o.inRoute){
</span><span class='line'>            cur.direction.top=1;
</span><span class='line'>            o.direction.bottom=1;
</span><span class='line'>            o.inRoute = true;
</span><span class='line'>            Stack.push(cur);
</span><span class='line'>            Stack.push(o);  
</span><span class='line'>            cur = o;
</span><span class='line'>   
</span><span class='line'>        }else{
</span><span class='line'>            cur = Stack.pop();
</span><span class='line'>            if(cur){
</span><span class='line'>                cur.inRoute = false;
</span><span class='line'>            }else{
</span><span class='line'>                showMsg('没有路径连接两个点！');
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>           
</span><span class='line'>        if( cur.x == start.x && cur.y == start.y && start.direction.left && start.direction.bottom && start.direction.right && start.direction.top){
</span><span class='line'>            showMsg('没有路径连接两个点！');
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>   
</span><span class='line'>        if( cur.x == end.x && cur.y == end.y){
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>       
</span><span class='line'>    for(i=0 ; i &lt; Stack.length ; i++){
</span><span class='line'>        var tmp = Stack[i];
</span><span class='line'>        $(getid([tmp.x , tmp.y])).addClass('route').html(i/2);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>// 显示信息
</span><span class='line'>function showMsg(msg){
</span><span class='line'>    alert(msg);
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>function getObject(Matrix , arg){
</span><span class='line'>   
</span><span class='line'>    if(Matrix[arg[0]] && Matrix[arg[0]][arg[1]]){
</span><span class='line'>        return Matrix[arg[0]][arg[1]];
</span><span class='line'>    }else{
</span><span class='line'>        return null
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>   
</span><span class='line'>/**
</span><span class='line'>* 将基于javascript 数组形式的 arg 转换为 jquery id形式
</span><span class='line'>* 用来查找页面中的方块
</span><span class='line'>* 如 : [3,4] =&gt; “#b-3-4” 
</span><span class='line'>**/
</span><span class='line'>function getid(arg){
</span><span class='line'>    return '#b-'+arg[0]+'-'+arg[1];
</span><span class='line'>}
</span><span class='line'>//--&gt;
</span><span class='line'>&lt;/script&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT 岗位说明书（岗位职责）]]></title>
    <link href="http://me.94313.net/blog/2012/10/19/it-gangwei-shuoming/"/>
    <updated>2012-10-19T10:17:27+08:00</updated>
    <id>http://me.94313.net/blog/2012/10/19/it-gangwei-shuoming</id>
    <content type="html"><![CDATA[<h2>岗位：程序员</h2>

<p>　　程序员(英文Programmer)是从事程序开发、维护的专业人员。一般我们将程序员分为程序设计人员和程序编码员，但两者的界限并不非常清楚，特别是在中国。
　　作一个真正合格的程序员，应该具有的素质。
    1：团队精神和协作能力
    　　团队精神和协作能力是作为一个程序员应具备的最基本的素质。软件工程 已经提了将近三十年了，当今的软件开发已经不是编程了，而是工程。独行侠可以写一些程序也能赚钱发财，但是进入研发团队，从事商业化和产品化的开发任务， 就必须具备这种素质。可以毫不夸张的说这种素质是一个程序员乃至一个团队的安身立命之本。
    2：文档习惯
    　　文档是一个软件系统的生命力。一个公司的产品再好、技术含量再高，如果没有缺乏文档，知识就没有继承，公司还是一个来料加工的软件作坊。作为代码程序员，必须将30％的工作时间写用于技术文档。没有文档的程序员势必会被淘汰。
    3：规范化的代码编写习惯
    　　知名软件公司的代码的变量命名、注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都有明确规定，良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同技术人员之间的协作。一些所谓的高手甚至叫嚣高手写的代码一般人看不懂，我只能说他不是一名合格的程序员。
    4：需求理解能力
    　　程序员要能正确理解任务单中描述的需求。在这里要明确一点，程序员不 仅仅要注意到软件的功能需求，还应注意软件的性能需求，要能正确评估自己的模块对整个项目中的影响及潜在的威胁，如果有着两到三年项目经验的熟练程序员对 这一点没有体会的话，只能说明他或许是认真工作过，但是没有用心工作。
    5：模块化思维能力
    　　作为一个优秀的程序员，他的思想不能在局限当前的工作任务里面，要想 想看自己写的模块是否可以脱离当前系统存在，通过简单的封装在其他系统中或其他模块中直接使用。这样做可以使代码能重复利用，减少重复的劳动，也能是系统 结构越趋合理。模块化思维能力的提高是一个程序员的技术水平提高的一项重要指标。
    6：测试习惯
    　　测试是软件工程质量保证的重要环节，但是测试不仅仅是测试工程师的工作，而是每个程序员的一种基本职责。程序员要认识测试不仅是正常的程序调试，而要是要进行有目的有针对性的异常调用测试，这一点要结合需求理解能力。
    7：学习和总结的能力
    　　程序员是很容易被淘汰的职业，所以要善于学习总结。许多程序员喜欢盲 目追求一些编码的小技巧，这样的技术人员无论学了多少语言，代码写起来多熟练，我们只能说他是一名熟练的代码民工，他永远都不会有质的提高。一个善于学习 的程序员会经常总结自己的技术水平，对自己的技术层面要有良好的定位，这样才能有目的地提高自己。这样才能逐步提高，从程序员升级为软件设计师、系统分析 员。
　　
    作为高级程序员，乃至于设计师而言，除了应该具备上述全部素质之外，还需要具备以下素质：
        1、 需求分析能力
        2、 整体框架能力
        3、 流程处理能力
        4、 模块分解能力
        5、 整体项目评估能力
        6、 团队组织管理能力
　</p>

<h3>岗位：项目经理</h3>

<p>主要职责：
    1、 计划：
        a)项目范围、项目质量、项目时间、项目成本的确认。
        b)项目过程/活动的标准化、规范化。
        c)根据项目范围、质量、时间与成本的综合因素的考虑，进行项目的总体规划与阶段计划。
        d)各项计划得到上级领导、客户方及项目组成员认可。
    2、 组织：
        a)组织项目所需的各项资源。
        b)设置项目组中的各种角色，并分配好各角色的责任与权限。
        c)定制项目组内外的沟通计划。（必要时可按配置管理要求写项目策划目录中的《项目沟通计划》）
        d)安排组内需求分析师、客户联系人等角色与客户的沟通与交流。
        e)处理项目组与其它项目干系人之间的关系。
        f)处理项目组内各角色之间的关系、处理项目组内各成员之间的关系。
        g)安排客户培训工作。
    3、 领导：
        a)保证项目组目标明确且理解一致。
        b)创建项目组的开发环境及氛围，在项目范围内保证项目组成员不受项目其它方面的影响。
        c)提升项目组士气，加强项目组凝聚力。
        d)合理安排项目组各成员的工作，使各成员工作都能达到一定的饱满度。
        e)制定项目组需要的招聘或培训人员的计划。
        f)定期组织项目组成员进行相关技术培训以及与项目相关的行业培训等。
        g)及时发现项目组中出现的问题。
        h)及时处理项目组中出现的问题。
    4、 控制
        a)保证项目在预算成本范围内按规定的质量和进度达到项目目标。
        b)在项目生命周期的各个阶段，跟踪、检查项目组成员的工作质量；
        c)定期向领导汇报项目工作进度以及项目开发过程中的难题。
        d)对项目进行配置管理与规划。
        e)控制项目组各成员的工作进度，即时了解项目组成员的工作情况，并能快速的解决项目组成员所碰到的难题。
        f)不定期组织项目组成员进行项目以外的短期活动，以培养团队精神。
结语：
项目经理是在整个项目开发过程中项目组内对所有非技术性重要事情做出最终决定的人。</p>

<h3>岗位：系统架构师（技术总监）</h3>

<p>主要功能及职责：
    1、系统架构师是软件项目的总体设计师，是软件组织新产品的开发与集成、新技术体系的构建者。
    2、系统架构师是在技术上对所有重要事情做出决定的人。（系统架构师在整个软件开发过程中都起着重要作用，并随着开发进程的推进而其职责或关注点不断地变化。）
    3、 需求阶段，软件架构师负责理解和管理非功能性系统需求，比如软件的可维护性、性能、复用性、可靠性、有效性和可测试性等。审查客户和市场人员所提出的需 求，确认开发团队所提出的设计；组织开发团队成员和开发过程的定义；协助需求分析师完成《用户需求说明书》、《需求变更说明书》。
    4、设计阶段，架构师负责对整个软件架构、关键构件、接口的设计。协助系统分析师完成《系统概要设计说明书》
    5、编码阶段，架构师则成为程序员的顾问，并且经常性地要举行一些技术研讨会、技术培训班等；
    6、测试及实施阶段，随着软件开始测试、集成和交付，集成和测试支持将成为软件架构师的工作重点；
结语：
系统架构师也可以理解成技术总监。系统架构师是在部门内所有软件项目中，对技术上所有重要的事情做出决定的人。</p>

<h3>岗位：需求分析师</h3>

<p>主要职责：
    1、在项目前期根据《需求调研计划》对客户进行需求调研。
    2、收集整理客户需求，负责编写《用户需求说明书》。
    3、代表项目组与用户沟通与项目需求有关的所有事项。
    4、代表客户与项目组成员沟通项目需求有关的所有事项。
    5、负责《用户需求说明书》得到用户的认可与签字。
    6、负责将完成的项目模块给客户做演示，并收集对完成模块的意见。
    7、完成《需求变更说明书》，并得到用户的认可与签字。
    8、并协助系统架构师、系统分析师对需求进行理解。
结语：
需求分析师是项目前期与客户方打交道最多的人，对于客户来说，他可以代表整个项目组，对与项目组成员来说他的意见可以代表客户方的意见，项目组内所有与客户需求相关的事情必需得到他的认可。</p>

<h3>岗位：系统分析师</h3>

<p>主要职责：
    1、 协助需求分析师进行需求调研。
    2、分析、解析《用户需求说明书》，将系统需求整理成《软件需求规格说明书》；
    3、负责解决《软件需求规格说明书》被评审后发现的问题；
    4、在分析系统前，负责向架构设计师解释《软件需求规格说明书》的内容。
    5、协助架构设计师进行架构设计，并协助其完成《系统架构说明书》。
    6、根据《系统架构说明书》对系统进行建模；
    7、系统分析及建模完成后，负责将建模成果转化为《系统概要设计》；
    8、协助数据库设计师按《系统概要设计说明书》进行数据库逻辑设计和物理设计，完成数据库CDM及PDM图，并协助其完成《数据库设计说明书》
    9、协助软件设计师按《系统概要设计说明书》进行《系统详细设计说明书》。
    10、指导软件工程师按《系统详细设计说明书》进行代码实现。
    11、 负责重点代码检查；
    12、协助项目经理进行配置管理，并提供优化改进建议；
    13、定期对项目组成员进行技术方面的培训。
结语：
系统分析师是项目组中的首席执行官，他涉及项目的所有方面，是项目进度的推动者，也是项目成功的关键。</p>

<h3>岗位：数据库设计师</h3>

<p>主要职责：
    1、根据《系统架构说明书》与系统架构师、系统分析师一同进行数据库建模。
    2、根据数据库建模结果，绘制数据库CDM与PDM图。
    3、 根据数据库PDM图进行数据库建库。
    4、 对数据库进行维护、备份、恢复、同步。
    5、 负责客户数据的导入导出。
    6、 对数据库进行初始化操作。
    7、协助软件设计师完成《系统详细设计说明书》中与数据库相关的部分。
    8、根据《系统详细设计说明书》编写对应的视图、存储过程、函数、触发器等。
    9、对项目组其它成员进行SQL方面的指导。
    10、定期对项目组其它成员进行数据库方面知识的培训。
    11、为测试经理及测试工程师建立测试数据。
结语：
数据库设计师又称DBA，是项目组中唯一能对数据库进行直接的操作的人。对项目中与数据库相关的所有重要的事做最终决定的人。</p>

<h3>岗位：软件设计师（模块）</h3>

<pre><code>1、根据《系统概要设计说明书》编写分模块的《系统详细说明书》。
2、负责对软件工程师讲解《系统详细设计说明书》内容。
3、协助软件工程师按《系统详细设计说明书》进行代码实现。
4、 控制本模块的开发进度。
</code></pre>

<p>结语：
软件设计师又称模块设计师，协助系统分析师对分模块进行详细设计，并直接管控该模块的进度，对于本模块中所有重要的事做最终决定的人。</p>

<h3>岗位：软件工程师</h3>

<p>主要职责：
    1.根据《系统详细设计说明书》进行代码实现；
    2.对自己代码进行复查，并进行简单的测试；
结语：
软件工程师是最终实现代码的成员。</p>

<h3>岗位：测试经理</h3>

<p>主要职责：
    1.独立编写测试计划；
    2.独立编写测试用例；
    3.协调测试团队内部的工作以及与开发团队之间的工作；
    4.完成“执行测试”的工作；
    5.掌握较深层次的测试方法、测试技术和较复杂的业务流程；
    6.负责测试过程工具的研究、推广与维护，负责测试数据库维护工作；
    7.负责编写《用户手册》、《操作手册》和相关培训教材；
    8.负责项目的质量审查。
结语：
测试经理其实应该是整个项目中最关心项目质量的人，他的主要工作就是找到项目中存在的不合理、不合格的部份，并要求项目其它成员按其给定的项目质量完成项目。</p>

<h3>岗位：测试工程师</h3>

<p>主要职责：
    1.在测试经理的安排和指导下，编写测试用例；
    2.在测试经理的安排和指导下，完成“执行测试”的工作；
    3.在测试经理的指导下，按测试计划进行测试工作；
    4.按测试用例进行测试工作。
    5.负责被分派项目的质量审计。
    6.了解项目的基本流程，可以熟练的进行项目中各种流程的操作。
结语：
测试工程师是项目质量的保证，是最终进行项目测试的成员。</p>

<h3>岗位：实施经理</h3>

<p>主要职责：
    1.负责制定项目实施计划；
    2.在项目实施计划的约束下，协调项目组相关资源，完成系统实施相关工作（包括系统安装、用户培训、系统上线、系统试运行等）；
    3.在项目实施阶段，跟踪、检查实施人员的工作质量；
    5.负责协助用户进行“用户确认测试”和编写《确认测试报告》。</p>

<h3>岗位：实施工程师</h3>

<p>主要职责：
    1.在实施经理安排和指导下，执行项目用户现场实施任务；
    2.参与编写《用户手册》、《操作手册》和相关培训教材；
    3.参与进行“用户确认测试”和编写《确认测试报告》。</p>

<h3>岗位：美术工程师</h3>

<p>主要职责：
    1.负责完成软件设计师安排的功能界面设计。
    2.负责对项目整体色彩的调配。
    3.向系统分析师提出项目美化的建议。
    4.为BS项目提供一套或几套CSS样式表及HTML结构表
    5.为CS项目提供符合项目内容的静态、动态图片。
    6.并为软件设计师提供界面指导。</p>

<h3>岗位：客户经理（当所开发的项目属于定制型的项目时设立，可由项目经理或部门经理兼）</h3>

<p>主要职责：
    1.策划并独立完成目标客户的拜访和沟通；
    2.定期分析、整理客户需求，制定有针对性的方案；
    3.进行重点客户的关系维护，了解并整理重点客户的需求，为开发更符合用户需求的产品提供富有价值的市场信息；
    4.参与产品定位的研讨，为产品策划献计献策。</p>

<h3>岗位：产品经理（当所开发的项目为产品型项目时设立，可由市场部成员兼）</h3>

<p>主要职责：
    1.对所负责的产品进行策划和管理；
    2.对所负责的产品进行市场调研和分析，及时提出应对措施；
    3.负责产品实现的内部管理，保证产品功能的顺利实现以及时满足市场需求；
    4.负责产品对外宣传与推广，开拓市场，提高产品品牌知名度和认可度；
    5.配合销售制订产品销售策略，支持市场销售业务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSA加密算法简单介绍]]></title>
    <link href="http://me.94313.net/blog/2012/05/30/intr-rsa/"/>
    <updated>2012-05-30T20:40:02+08:00</updated>
    <id>http://me.94313.net/blog/2012/05/30/intr-rsa</id>
    <content type="html"><![CDATA[<p>这种算法1978年就出现了，它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。
   算法的名字以发明者的名字命名：Ron Rivest, AdiShamir 和Leonard Adleman。
   　　RSA算法是一种非对称密码算法，所谓非对称，就是指该算法需要一对密钥，使用其中一个加密，则需要用另一个
   才能解密。
   　　RSA的算法涉及三个参数，n、e、d。
   　　其中，n是两个大质数p、q的积。n的二进制表示时所占用的位数，就是所谓的密钥长度。
   　　e和d是一对相关的值，e可以任意取，但要求满足e&lt;(p-1)<em>(q-1)并具 e与(p-1)</em>(q-1)互质（就是最大公约数为1）；
   再选择d，要求(d<em>e)mod((p-1)</em>(q-1))=1。
   　　(n及e),(n及d)就是密钥对。
   　　RSA加解密的算法完全相同,设M为明文，c为密文，则：
       加密：C=M<sup>e</sup> mod n;
       解密：m=c<sup>d</sup> mod n;
   　　注：上面两式中的e和d可以互换。<br/>
       n d两个数构成公钥，可以告诉别人；
       n e两个数构成私钥，e自己保留，不让任何人知道。
       给别人发送的信息使用私钥e加密,只要别人能用公钥d解开就证明信息是由你发送的,构成了签名机制,起验证身份的作用。
   别人给你发送信息时使用d加密，这样只有拥有e的你能够对其解密,起到数据保密的作用。<br/>
   整理一下：
    为实现RSA的加解密
    最终目标：找三个参数 n,e,d
    1、n = p<em>q (p,q 是两个质数)
    2、
        1)、φ(N)=(p-1)</em>(q-1)
        2)、取任何一个数e,要求满足e&lt;φ(N)并且e与φ(N)互质
    3、(d*e) modφ(N)=1
//================================================================
加密的明文长度不能超过RSA密钥的长度-11，比如1024位的，明文长度不能超过117。 <br/>
密文的长度总是密钥的长度的一半，比如1024位的，密文长度是64，如果是1032位，密文长度是65位。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux命令行技巧]]></title>
    <link href="http://me.94313.net/blog/2012/03/23/command-line-skill-of-linux/"/>
    <updated>2012-03-23T13:18:37+08:00</updated>
    <id>http://me.94313.net/blog/2012/03/23/command-line-skill-of-linux</id>
    <content type="html"><![CDATA[<h2>编辑命令</h2>

<pre><code>* Ctrl + a ：移到命令行首
* Ctrl + e ：移到命令行尾
* Ctrl + f ：按字符前移（右向）
* Ctrl + b ：按字符后移（左向）
* Alt + f ：按单词前移（右向）
* Alt + b ：按单词后移（左向）
* Ctrl + xx：在命令行首和光标之间移动
* Ctrl + u ：从光标处删除至命令行首
* Ctrl + k ：从光标处删除至命令行尾
* Ctrl + w ：从光标处删除至字首
* Alt + d ：从光标处删除至字尾
* Ctrl + d ：删除光标处的字符
* Ctrl + h ：删除光标前的字符
* Ctrl + y ：粘贴至光标后
* Alt + c ：从光标处更改为首字母大写的单词
* Alt + u ：从光标处更改为全部大写的单词
* Alt + l ：从光标处更改为全部小写的单词
* Ctrl + t ：交换光标处和之前的字符
* Alt + t ：交换光标处和之前的单词
* Alt + Backspace：与 Ctrl + w 相同类似
</code></pre>

<h2>重新执行命令</h2>

<pre><code>* Ctrl + r：逆向搜索命令历史
* Ctrl + g：从历史搜索模式退出
* Ctrl + p：历史中的上一条命令
* Ctrl + n：历史中的下一条命令
* Alt + .：使用上一条命令的最后一个参数
</code></pre>

<h2>控制命令</h2>

<pre><code>* Ctrl + l：清屏
* Ctrl + o：执行当前命令，并选择上一条命令
* Ctrl + s：阻止屏幕输出
* Ctrl + q：允许屏幕输出
* Ctrl + c：终止命令
* Ctrl + z：挂起命令
</code></pre>

<h2>Bang (!) 命令</h2>

<pre><code>* !!：执行上一条命令
* !blah：执行最近的以 blah 开头的命令，如 !ls
* !blah:p：仅打印输出，而不执行
* !$：上一条命令的最后一个参数，与 Alt + . 相同
* !$:p：打印输出 !$ 的内容
* !*：上一条命令的所有参数
* !*:p：打印输出 !* 的内容
* ^blah：删除上一条命令中的 blah
* ^blah^foo：将上一条命令中的 blah 替换为 foo
* ^blah^foo^：将上一条命令中所有的 blah 都替换为 foo
</code></pre>

<h2>注意：</h2>

<pre><code>1. 以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。
2. ^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。
</code></pre>
]]></content>
  </entry>
  
</feed>
