<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | 每个人的声音都面向世界]]></title>
  <link href="http://me.94313.net/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://me.94313.net/"/>
  <updated>2017-05-07T18:24:06+08:00</updated>
  <id>http://me.94313.net/</id>
  <author>
    <name><![CDATA[wuchangqian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一致性哈希算法浅析]]></title>
    <link href="http://me.94313.net/blog/2014/01/31/consistent-hashing/"/>
    <updated>2014-01-31T10:27:40+08:00</updated>
    <id>http://me.94313.net/blog/2014/01/31/consistent-hashing</id>
    <content type="html"><![CDATA[<p>在做服务器负载均衡时候可供选择的负载均衡的算法有很多，包括：</p>

<ul>
<li>轮循算法（Round Robin）</li>
<li>哈希算法（HASH）</li>
<li>最少连接算法（Least Connection）</li>
<li>响应速度算法（Response Time）</li>
<li>加权法（Weighted ）等</li>
</ul>


<p> 其中哈希算法是最为常用的算法.
典型的应用场景是： 有N台服务器提供缓存服务，需要对服务器进行负载均衡，将请求平均分发到每台服务器上，每台机器负责1/N的服务。
常用的算法是对hash结果取余数 (hash() mod N)：对机器编号从0到N-1，按照自定义的hash()算法，对每个请求的hash()值按N取模，得到余数i，然后将请求分发到编号为i的机器。但这样的算法方法存在致命问题，如果某一台机器宕机，那么应该落在该机器的请求就无法得到正确的处理，这时需要将当掉的服务器从算法从去除，此时候会有(N-1)/N的服务器的缓存数据需要重新进行计算；如果新增一台机器，会有N /(N+1)的服务器的缓存数据需要进行重新计算。对于系统而言，这通常是不可接受的颠簸（因为这意味着大量缓存的失效或者数据需要转移）。那么，如何设计一个负载均衡策略，使得受到影响的请求尽可能的少呢？
在Memcached、Key-Value Store、Bittorrent DHT、LVS中都采用了Consistent Hashing算法，可以说Consistent Hashing 是分布式系统负载均衡的首选算法。
1、Consistent Hashing算法描述
下面以Memcached中的Consisten Hashing算法为例说明。
由于hash算法结果一般为unsigned int型，因此对于hash函数的结果应该均匀分布在[0,232-1]间，如果我们把一个圆环用232 个点来进行均匀切割，首先按照hash(key)函数算出服务器（节点）的哈希值， 并将其分布到0～232的圆上。
用同样的hash(key)函数求出需要存储数据的键的哈希值，并映射到圆上。然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器（节点）上。</p>

<p><img src="/images/consistent-hashing-01.png" alt="consistent hashing" /></p>

<p>Consistent Hashing原理示意图
新增一个节点的时候，只有在圆环上新增节点逆时针方向的第一个节点的数据会受到影响。删除一个节点的时候，只有在圆环上原来删除节点顺时针方向的第一个节点的数据会受到影响，因此通过Consistent Hashing很好地解决了负载均衡中由于新增节点、删除节点引起的hash值颠簸问题。</p>

<p><img src="/images/consistent-hashing-02.png" alt="consistent hashing" /></p>

<p>Consistent Hashing添加服务器示意图
虚拟节点（virtual nodes）：之所以要引进虚拟节点是因为在服务器（节点）数较少的情况下（例如只有3台服务器），通过hash(key)算出节点的哈希值在圆环上并不是均匀分布的（稀疏的），仍然会出现各节点负载不均衡的问题。虚拟节点可以认为是实际节点的复制品（replicas），本质上与实际节点实际上是一样的（key并不相同）。引入虚拟节点后，通过将每个实际的服务器（节点）数按照一定的比例(例如200倍)扩大后并计算其hash(key)值以均匀分布到圆环上。在进行负载均衡时候，落到虚拟节点的哈希值实际就落到了实际的节点上。由于所有的实际节点是按照相同的比例复制成虚拟节点的，因此解决了节点数较少的情况下哈希值在圆环上均匀分布的问题。</p>

<p><img src="/images/consistent-hashing-03.png" alt="consistent hashing" /></p>

<p>虚拟节点对Consistent Hashing结果的影响
从上图可以看出，在节点数为10个的情况下，每个实际节点的虚拟节点数为实际节点的100-200倍的时候，结果还是很均衡的。</p>

<p>第3段中有这些文字：“但这样的算法方法存在致命问题，如果某一台机器宕机，那么应该落在该机器的请求就无法得到正确的处理，这时需要将当掉的服务器从算法从去除，此时候会有(N-1)/N的服务器的缓存数据需要重新进行计算；”
为何是 (N-1)/N 呢？解释如下：
  比如有 3 台机器，hash值 1-6 在这3台上的分布就是：
  host 1: 1 4
  host 2: 2 5
  host 3: 3 6
  如果挂掉一台，只剩两台，模数取 2 ，那么分布情况就变成：
  host 1: 1 3 5
  host 2: 2 4 6
可以看到，还在数据位置不变的只有2个： 1，2，位置发生改变的有4个，占共6个数据的比率是 4/6 = 2/3
这样的话，受影响的数据太多了，势必太多的数据需要重新从 DB 加载到 cache 中，严重影响性能</p>

<p>【consistent hashing 的办法】
上面提到的 hash 取模，模数取的比较小，一般是负载的数量，而 consistent hashing 的本质是将模数取的比较大，为 2的32次方减1，即一个最大的 32 位整数。然后，就可以从容的安排数据导向了，那个图还是挺直观的
以下部分为一致性哈希算法的一种PHP实现。
下载地址 ：<a href="http://zwzweb.googlecode.com/files/Consistent%20Hashing.php">http://zwzweb.googlecode.com/files/Consistent%20Hashing.php</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用栈来找路径]]></title>
    <link href="http://me.94313.net/blog/2012/12/06/use-of-stack/"/>
    <updated>2012-12-06T09:46:51+08:00</updated>
    <id>http://me.94313.net/blog/2012/12/06/use-of-stack</id>
    <content type="html"><![CDATA[<p><img src="/images/use-of-stack-01.png" alt="示例图片-01" />
    &lt;!DOCTYPE html>
    <html>
    <head>
    <title> 数据结构-栈的应用 </title>
    <meta http-equiv="Content-type" content="text/html;charset=utf-8;" >
    <style>
    <em>{margin:0;padding:0;}
    #container .line{display:block;float:left;}
    .block{width:15px;height:15px;float:left;font-size:8px;border-right:1px solid #111;border-bottom:1px solid #111;}
    .bld{background:black;color:#fff;}
    .start{background:red;color:#fff;}
    .end{background:red;color:#f00;}
    .route{background:red;}
    </style>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.0/jquery.min.js"></script>
    </head>
    <body>
        <h1>使用栈来找路径</h1>
        <p>
        查找从左上角到右下角的路径，图中的方块表示障碍；点击方块可以改变其状态（通或者不通）
        </p>
    <button text='clear' id="btn-clear">清除路径</button>
    <button text='clear' id="btn-find">查找路径</button>
      <div id='container'></div>
      <script type="text/javascript">
    &lt;!&ndash;
    /</em><strong><strong> 入口函数 </strong></strong>/
    $(function(){
        init();
        addEvents();
    });</p>

<pre><code>function init(){

    window.M_x = 70;  //矩阵的宽和高
    window.M_y = 45;
    window.Matrix = createMatrix(M_x , M_y);

    showMatrixAsDivBlock(M_x , M_y);
    setDisableBlocks(M_x , M_y , 1100);

    var n1 = [2  , 2];
    var n2 = [M_y-2 ,M_x-2];
    window.startNode = n1;
    window.endNode = n2;

    $(getid(n1)).addClass('start').addClass('route').text('from');
    $(getid(n2)).addClass('end').addClass('route').text('end');
}

/****创建界面****/
function showMatrixAsDivBlock(x , y){
    var div =[]
    var line=[];
    var i , j;
    for(i = 1 ; i &lt; y ; i++){
        for(j = 1 ; j &lt; x ; j++){
            line[j] = "&lt;div id='b-"+i+'-'+j+"' class='block'&gt;&lt;/div&gt;";
        }
        div[i] = '&lt;div class="line"&gt;' + line.join('') + '&lt;/div&gt;';
    }
    $('#container').html(div.join('')+'&lt;div style="clear:both;"&gt;&lt;/div&gt;');
}

/*****创建矩阵****/
function createMatrix(M_x , M_y){
    var Matrix = [];
    for(i = 1; i &lt; M_y; i++){
        Matrix[i] = [];
        for(j = 1; j &lt; M_x; j++){
            if(i==1 || i==M_y-1 || j==1 || j==M_x-1){
                var s = true;
            }else{
                var s = false;
            }
            Matrix[i][j] = {
                disable :s    /// 标示当前的节点是否为阻断 1 ：阻断 ，0 ：联通
                ,x      :i   /// 标示当前节点的x坐标
                ,y      :j   /// 标示当前节点的y坐标
                ,inRoute:false ///标示当前节点是否在路径中
                ,direction:{    /// 标示当前节点四个方向是否被遍历过
                    left:0 , bottom:0 , right:0 , top:0
                }
            };
        }
    }
    return Matrix;
}

/*将所有的障碍设置起来*/
function setDisableBlocks(M_x , M_y , count){

    var i ; var j;
    for(i=1 ; i&lt; M_y ; i++){
        for(j=1 ; j &lt; M_x ; j++){
            if(i==1 || j == 1 || i == M_y-1 || j == M_x-1){
                Matrix[i][j].disable = true;
                $('#b-'+i+'-'+j).addClass('bld');    
            }
        }
    }
    while(count){
        i = parseInt((Math.random() * 10000))% M_y;
        j = parseInt((Math.random() * 10000))% M_x;
        if((i==2 &amp;&amp; j==2) || (i==M_y-2 &amp;&amp; j ==M_x-2)){
            continue;
        }
        if(i &gt; 1 &amp;&amp; i &lt; M_y &amp;&amp; j &gt; 1 &amp;&amp; j &lt; M_x){

            Matrix[i][j].disable = true;
            $('#b-'+i+'-'+j).addClass('bld');
            count--;
        }                
    }
}

/***设置所有“方块”以及两个按钮的单击事件***/
function addEvents(){

    /**清除路径按钮**/
    $('#btn-clear').click(function(){
        for(i = 1 ; i &lt; M_y ; i++){
            for(j = 1 ; j &lt; M_x ; j++){
               var o = window.Matrix[i][j];
               o.inRoute = false;
               o.direction={left:0 , bottom:0 , right:0 , top:0};
            }
        }
        if(window.Stack){
            for(i=0 ; i &lt; Stack.length ; i++){
                var o = Stack[i];
                $(getid([o.x , o.y])).removeClass('route').html('');
            }
        }
    });

    /**查找路径按钮**/
    $('#btn-find').click(function(){
        $('#btn-clear').click();
        find(window.Matrix ,window.startNode , window.endNode);
    });

    /** 方块单击事件**/
    $('.block').click(function(){
        var id = $(this).attr('id');
        var ary = id.split('-');
        var i = ary[1];
        var j = ary[2];
        if(i == 1 || j == 1 || i == M_y || j == M_x){;}else{// 不能改变四个边的状态   
            Matrix[i][j].disable = !Matrix[i][j].disable;
            $('#'+id).toggleClass('bld');
        }
    });
}

// 查找路径
function find(Matrix , n1 , n2){
    // 先标示 起点和终点
    $(getid(n1)).addClass('start').addClass('route').text('from');
    $(getid(n2)).addClass('end').addClass('route').text('end');

    var start = getObject(Matrix , n1);
    var end   = getObject(Matrix , n2)
    var cur = start;

    window.Stack = Stack = [];
    start.inRoute = true;

    while(true){
        if(cur.direction.left == 0 &amp;&amp; (o = getObject(Matrix , [cur.x , cur.y+1])) &amp;&amp; !o.disable ){// &amp;&amp; !o.inRoute){

            cur.direction.left=1;
            o.direction.right=1;
            o.inRoute = true;
            Stack.push(cur);
            Stack.push(o);
            cur = o;

        }else if(cur.direction.bottom == 0 &amp;&amp; (o = getObject(Matrix , [cur.x+1 , cur.y])) &amp;&amp; !o.disable ){// &amp;&amp; !o.inRoute){

            cur.direction.bottom=1;
            o.direction.top=1;
            o.inRoute = true;
            Stack.push(cur);
            Stack.push(o);  
            cur = o;

        }else if(cur.direction.right == 0 &amp;&amp; (o = getObject(Matrix , [cur.x , cur.y-1])) &amp;&amp; !o.disable){// &amp;&amp; !o.inRoute){

            cur.direction.right=1;
            o.direction.left=1;
            o.inRoute = true;
            Stack.push(cur);
            Stack.push(o);  
            cur = o;

        }else if(cur.direction.top == 0 &amp;&amp; (o = getObject(Matrix , [cur.x-1 , cur.y])) &amp;&amp; !o.disable ){// &amp;&amp; !o.inRoute){
            cur.direction.top=1;
            o.direction.bottom=1;
            o.inRoute = true;
            Stack.push(cur);
            Stack.push(o);  
            cur = o;

        }else{
            cur = Stack.pop();
            if(cur){
                cur.inRoute = false;
            }else{
                showMsg('没有路径连接两个点！');
                break;
            }
        }

        if( cur.x == start.x &amp;&amp; cur.y == start.y &amp;&amp; start.direction.left &amp;&amp; start.direction.bottom &amp;&amp; start.direction.right &amp;&amp; start.direction.top){
            showMsg('没有路径连接两个点！');
            break;
        }

        if( cur.x == end.x &amp;&amp; cur.y == end.y){
            break;
        }
    }

    for(i=0 ; i &lt; Stack.length ; i++){
        var tmp = Stack[i];
        $(getid([tmp.x , tmp.y])).addClass('route').html(i/2);
    }
}

// 显示信息
function showMsg(msg){
    alert(msg);
}

function getObject(Matrix , arg){

    if(Matrix[arg[0]] &amp;&amp; Matrix[arg[0]][arg[1]]){
        return Matrix[arg[0]][arg[1]];
    }else{
        return null
    }
}

/**
* 将基于javascript 数组形式的 arg 转换为 jquery id形式
* 用来查找页面中的方块
* 如 : [3,4] =&gt; “#b-3-4” 
**/
function getid(arg){
    return '#b-'+arg[0]+'-'+arg[1];
}
//--&gt;
&lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSA加密算法简单介绍]]></title>
    <link href="http://me.94313.net/blog/2012/05/30/intr-rsa/"/>
    <updated>2012-05-30T20:40:02+08:00</updated>
    <id>http://me.94313.net/blog/2012/05/30/intr-rsa</id>
    <content type="html"><![CDATA[<p>这种算法1978年就出现了，它是第一个既能用于数据加密也能用于数字签名的算法。它易于理解和操作，也很流行。
   算法的名字以发明者的名字命名：Ron Rivest, AdiShamir 和Leonard Adleman。
   　　RSA算法是一种非对称密码算法，所谓非对称，就是指该算法需要一对密钥，使用其中一个加密，则需要用另一个
   才能解密。
   　　RSA的算法涉及三个参数，n、e、d。
   　　其中，n是两个大质数p、q的积。n的二进制表示时所占用的位数，就是所谓的密钥长度。
   　　e和d是一对相关的值，e可以任意取，但要求满足e&lt;(p-1)<em>(q-1)并具 e与(p-1)</em>(q-1)互质（就是最大公约数为1）；
   再选择d，要求(d<em>e)mod((p-1)</em>(q-1))=1。
   　　(n及e),(n及d)就是密钥对。
   　　RSA加解密的算法完全相同,设M为明文，c为密文，则：
       加密：C=M<sup>e</sup> mod n;
       解密：m=c<sup>d</sup> mod n;
   　　注：上面两式中的e和d可以互换。<br/>
       n d两个数构成公钥，可以告诉别人；
       n e两个数构成私钥，e自己保留，不让任何人知道。
       给别人发送的信息使用私钥e加密,只要别人能用公钥d解开就证明信息是由你发送的,构成了签名机制,起验证身份的作用。
   别人给你发送信息时使用d加密，这样只有拥有e的你能够对其解密,起到数据保密的作用。<br/>
   整理一下：
    为实现RSA的加解密
    最终目标：找三个参数 n,e,d
    1、n = p<em>q (p,q 是两个质数)
    2、
        1)、φ(N)=(p-1)</em>(q-1)
        2)、取任何一个数e,要求满足e&lt;φ(N)并且e与φ(N)互质
    3、(d*e) modφ(N)=1
//================================================================
加密的明文长度不能超过RSA密钥的长度-11，比如1024位的，明文长度不能超过117。 <br/>
密文的长度总是密钥的长度的一半，比如1024位的，密文长度是64，如果是1032位，密文长度是65位。</p>
]]></content>
  </entry>
  
</feed>
