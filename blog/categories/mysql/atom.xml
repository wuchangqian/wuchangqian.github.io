<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 每个人的声音都面向世界]]></title>
  <link href="http://me.94313.net/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://me.94313.net/"/>
  <updated>2016-07-20T14:21:15+08:00</updated>
  <id>http://me.94313.net/</id>
  <author>
    <name><![CDATA[wuchangqian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL 的 Prompt 转义字符]]></title>
    <link href="http://me.94313.net/blog/2014/10/19/mysql-shell-prompt-metachar/"/>
    <updated>2014-10-19T10:53:38+08:00</updated>
    <id>http://me.94313.net/blog/2014/10/19/mysql-shell-prompt-metachar</id>
    <content type="html"><![CDATA[<pre><code>\c    ：A counter that increments for each statement you issue
\D    ：The full current date
\d    ：The default database
\h    ：The server host
\l    ：The current delimiter (new in 5.1.12)
\m    ：Minutes of the current time
\n    ：A newline character
\O    ：The current month in three-letter format (Jan, Feb, …)
\o    ：The current month in numeric format
\P    ：am/pm
\p    ：The current TCP/IP port or socket file
\R    ：The current time, in 24-hour military time (0–23)
\r    ：The current time, standard 12-hour time (1–12)
\S    ：Semicolon
\s    ：Seconds of the current time
\t    ：A tab character
\U    ：Your full user_name@host_name account name
\u    ：Your user name
\v    ：The server version
\w    ：The current day of the week in three-letter format (Mon, Tue, …)
\Y    ：The current year, four digits
\y    ：The current year, two digits
\_    ：A space
\A    ：space (a space follows the backslash)
\'    ：Single quote
\"    ：Double quote
\\    ：A literal “\” backslash character
\x    ：x, for any “x” not listed above
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[理解Mysql字符集设置]]></title>
    <link href="http://me.94313.net/blog/2012/01/17/understand-mysql-charset/"/>
    <updated>2012-01-17T10:39:27+08:00</updated>
    <id>http://me.94313.net/blog/2012/01/17/understand-mysql-charset</id>
    <content type="html"><![CDATA[<h3>基本概念</h3>

<ul>
<li>字符(Character)是指人类语言中最小的表义符号。例如’A’、’B’等；</li>
<li>给定一系列字符，对每个字符赋予一个数值，用数值来代表对应的字符，这一数值就是字符的编码(Encoding)例如，我们给字符’A’赋予数值0，给字符’B’赋予数值1，则0就是字符’A’的编码；</li>
<li>给定一系列字符并赋予对应的编码后，所有这些字符和编码对组成的集合就是字符集(Character Set)。例如，给定字符列表为{’A’,’B’}时，{’A’=>0, ‘B’=>1}就是一个字符集；</li>
<li>字符序(Collation)是指在同一字符集内字符之间的比较规则；</li>
<li>确定字符序后，才能在一个字符集上定义什么是等价的字符，以及字符之间的大小关系；</li>
<li>每个字符序唯一对应一种字符集，但一个字符集可以对应多种字符序，其中有一个是默认字符序(Default Collation)；</li>
<li>MySQL中的字符序名称遵从命名惯例：以字符序对应的字符集名称开头；以<em>ci(表示大小写不敏感)、</em>cs(表示大小写敏感)或_bin(表示按编码值比较)结尾。例如：在字符序“utf8_general_ci”下，字符“a”和“A”是等价的；</li>
</ul>


<h3>MySQL字符集设置</h3>

<p>• 系统变量：
    – character_set_server：默认的内部操作字符集
    – character_set_client：客户端来源数据使用的字符集
    – character_set_connection：连接层字符集
    – character_set_results：查询结果字符集
    – character_set_database：当前选中数据库的默认字符集
    – character_set_system：系统元数据(字段名等)字符集
    – 还有以collation<em>开头的同上面对应的变量，用来描述字符序。
• 用introducer指定文本字符串的字符集：
    – 格式为：[</em>charset] ’string’ [COLLATE collation]
    – 例如：
        • SELECT <em>latin1 ’string’;
        • SELECT </em>utf8 ‘你好’ COLLATE utf8_general_ci;
    – 由introducer修饰的文本字符串在请求过程中不经过多余的转码，直接转换为内部字符集处理。</p>

<h3>MySQL中的字符集转换过程</h3>

<pre><code>1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；
2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：
    • 使用每个数据字段的CHARACTER SET设定值；
    • 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；
    • 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；
    • 若上述值不存在，则使用character_set_server设定值。
3. 将操作结果从内部操作字符集转换为character_set_results。
</code></pre>

<p><img src="/images/understand-mysql-charset-01.jpg" alt="understand-mysql-charset" /></p>

<h3>常见问题解析</h3>

<ul>
<li>向默认字符集为utf8的数据表插入utf8编码的数据前没有设置连接字符集，查询时设置连接字符集为utf8</li>
<li>插入时根据MySQL服务器的默认设置，character_set_client、character_set_connection和character_set_results均为latin1；</li>
<li>插入操作的数据将经过latin1=>latin1=>utf8的字符集转换过程，这一过程中每个插入的汉字都会从原始的3个字节变成6个字节保存；</li>
<li>查询时的结果将经过utf8=>utf8的字符集转换过程，将保存的6个字节原封不动返回，产生乱码……</li>
</ul>


<p><img src="/images/understand-mysql-charset-02.jpg" alt="understand-mysql-charset" /></p>

<ul>
<li>向默认字符集为latin1的数据表插入utf8编码的数据前设置了连接字符集为utf8</li>
<li>插入时根据连接字符集设置，character_set_client、character_set_connection和character_set_results均为utf8；</li>
<li>插入数据将经过utf8=>utf8=>latin1的字符集转换，若原始数据中含有\u0000~\u00ff范围以外的Unicode字 符，会因为无法在latin1字符集中表示而被转换为“?”(0×3F)符号，以后查询时不管连接字符集设置如何都无法恢复其内容了。</li>
</ul>


<p><img src="/images/understand-mysql-charset-02.jpg" alt="understand-mysql-charset" /></p>

<h3>检测字符集问题的一些手段</h3>

<ul>
<li>SHOW CHARACTER SET;</li>
<li>SHOW COLLATION;</li>
<li>SHOW VARIABLES LIKE ‘character%’;</li>
<li>SHOW VARIABLES LIKE ‘collation%’;</li>
<li>SQL函数HEX、LENGTH、CHAR_LENGTH</li>
<li>SQL函数CHARSET、COLLATION</li>
</ul>


<h3>使用MySQL字符集时的建议</h3>

<ul>
<li>建立数据库/表和进行数据库操作时尽量显式指出使用的字符集，而不是依赖于MySQL的默认设置，否则MySQL升级时可能带来很大困扰；</li>
<li>数据库和连接字符集都使用latin1时虽然大部分情况下都可以解决乱码问题，但缺点是无法以字符为单位来进行SQL操作，一般情况下将数据库和连接字符集都置为utf8是较好的选择；</li>
<li>使用mysql C API时，初始化数据库句柄后马上用mysql_options设定MYSQL_SET_CHARSET_NAME属性为utf8，这样就不用显式地用 SET NAMES语句指定连接字符集，且用mysql_ping重连断开的长连接时也会把连接字符集重置为utf8；</li>
<li>对于mysql PHP API，一般页面级的PHP程序总运行时间较短，在连接到数据库以后显式用SET NAMES语句设置一次连接字符集即可；但当使用长连接时，请注意保持连接通畅并在断开重连后用SET NAMES语句显式重置连接字符集。</li>
</ul>


<h3>其他注意事项</h3>

<ul>
<li>my.cnf中的default_character_set设置只影响mysql命令连接服务器时的连接字符集，不会对使用libmysqlclient库的应用程序产生任何作用！</li>
<li>对字段进行的SQL函数操作通常都是以内部操作字符集进行的，不受连接字符集设置的影响。</li>
<li>SQL语句中的裸字符串会受到连接字符集或introducer设置的影响，对于比较之类的操作可能产生完全不同的结果，需要小心！</li>
</ul>

]]></content>
  </entry>
  
</feed>
